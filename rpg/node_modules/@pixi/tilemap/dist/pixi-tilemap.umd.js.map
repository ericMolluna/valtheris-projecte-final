{"version":3,"file":"pixi-tilemap.umd.js","sources":["../src/CanvasTileRenderer.ts","../src/settings.ts","../src/Tilemap.ts","../src/CompositeTilemap.ts","../src/TextileResource.ts","../src/shaderGenerator.ts","../src/TilemapShader.ts","../src/TileRenderer.ts","../src/index.ts"],"sourcesContent":["import { extensions, ExtensionType, IRenderer } from '@pixi/core';\r\n\r\n/**\r\n * The renderer plugin for canvas. It isn't registered by default.\r\n *\r\n * ```\r\n * import { CanvasTileRenderer } from '@pixi/tilemap';\r\n * import { CanvasRenderer } from '@pixi/canvas-core';\r\n *\r\n * // You must register this yourself (optional). @pixi/tilemap doesn't do it to\r\n * // prevent a hard dependency on @pixi/canvas-core.\r\n * CanvasTileRenderer.registerExtension();\r\n * ```\r\n */\r\n// TODO: Move to @pixi/tilemap-canvas\r\nexport class CanvasTileRenderer\r\n{\r\n    /** The renderer */\r\n    renderer: IRenderer;\r\n\r\n    /** The global tile animation state */\r\n    tileAnim = [0, 0];\r\n\r\n    /** @deprecated */\r\n    dontUseTransform = false;\r\n\r\n    /** @param renderer */\r\n    constructor(renderer: IRenderer)\r\n    {\r\n        this.renderer = renderer;\r\n        this.tileAnim = [0, 0];\r\n    }\r\n\r\n    static registerExtension()\r\n    {\r\n        extensions.add({\r\n            name: 'tilemap',\r\n            type: ExtensionType.CanvasRendererPlugin,\r\n            ref: CanvasTileRenderer as any\r\n        });\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\r\n    static getInstance(renderer: any): CanvasTileRenderer\r\n    {\r\n        if (!renderer.plugins.tilemap)\r\n        {\r\n            throw new Error('Extension not registered!');\r\n        }\r\n\r\n        return renderer.plugins.tilemap;\r\n    }\r\n}\r\n","import { SCALE_MODES } from '@pixi/core';\r\n\r\n/**\r\n * These are additional @pixi/tilemap options.\r\n *\r\n * This settings should not be changed after the renderer has initialized; otherwise, the behavior\r\n * is undefined.\r\n */\r\nexport const settings = {\r\n    /** The default number of textures per tilemap in a tilemap composite. */\r\n    TEXTURES_PER_TILEMAP: 16,\r\n\r\n    /**\r\n     * The width/height of each texture tile in a {@link TEXTILE_DIMEN}. This is 1024px by default.\r\n     *\r\n     * This should fit all tile base-textures; otherwise, {@link TextileResource} may fail to correctly\r\n     * upload the textures togther in a tiled fashion.\r\n     */\r\n    TEXTILE_DIMEN: 1024,\r\n\r\n    /**\r\n     * The number of texture tiles per {@link TextileResource}.\r\n     *\r\n     * Texture tiling is disabled by default, and so this is set to `1` by default. If it is set to a\r\n     * higher value, textures will be uploaded together in a tiled fashion.\r\n     *\r\n     * Since {@link TextileResource} is a dual-column format, this should be even for packing\r\n     * efficiency. The optimal value is usually 4.\r\n     */\r\n    TEXTILE_UNITS: 1,\r\n\r\n    /** The scaling mode of the combined texture tiling. */\r\n    TEXTILE_SCALE_MODE: SCALE_MODES.LINEAR,\r\n\r\n    /** This will enable 32-bit index buffers. It's useful when you have more than 16K tiles. */\r\n    use32bitIndex: false,\r\n\r\n    /** Flags whether textiles should be cleared when each tile is uploaded. */\r\n    DO_CLEAR: true,\r\n\r\n    // Backward compatibility\r\n    get maxTextures(): number { return this.MAX_TEXTURES; },\r\n    set maxTextures(value: number) { this.MAX_TEXTURES = value; },\r\n\r\n    get boundSize(): number { return this.TEXTURE_TILE_DIMEN; },\r\n    set boundSize(value: number) { this.TILE_TEXTURE_DIMEN = value; },\r\n\r\n    get boundCountPerBuffer(): number { return this.TEXTILE_UNITS; },\r\n    set boundCountPerBuffer(value: number) { this.TEXTILE_UNITS = value; },\r\n};\r\n\r\n// @deprecated\r\nexport const Constant = settings;\r\n","/* eslint-disable no-unused-vars */\r\nimport { Container, Bounds } from '@pixi/display';\r\nimport { Texture, Renderer, Matrix, Rectangle, groupD8, DRAW_MODES } from '@pixi/core';\r\nimport { TileRenderer } from './TileRenderer';\r\nimport { settings } from './settings';\r\nimport { CanvasTileRenderer } from './CanvasTileRenderer';\r\n\r\nimport type { BaseTexture } from '@pixi/core';\r\nimport type { IDestroyOptions } from '@pixi/display';\r\nimport type { TilemapGeometry } from './TilemapShader';\r\n\r\nenum POINT_STRUCT\r\n    {\r\n    U,\r\n    V,\r\n    X,\r\n    Y,\r\n    TILE_WIDTH,\r\n    TILE_HEIGHT,\r\n    ROTATE,\r\n    ANIM_X,\r\n    ANIM_Y,\r\n    TEXTURE_INDEX,\r\n    ANIM_COUNT_X,\r\n    ANIM_COUNT_Y,\r\n    ANIM_DIVISOR,\r\n    ALPHA,\r\n}\r\n\r\nexport const POINT_STRUCT_SIZE = (Object.keys(POINT_STRUCT).length / 2);\r\n\r\n/**\r\n * A rectangular tilemap implementation that renders a predefined set of tile textures.\r\n *\r\n * The {@link Tilemap.tileset tileset} of a tilemap defines the list of base-textures that can be painted in the\r\n * tilemap. A texture is identified using its base-texture's index into the this list, i.e. changing the base-texture\r\n * at a given index in the tileset modifies the paint of all tiles pointing to that index.\r\n *\r\n * The size of the tileset is limited by the texture units supported by the client device. The minimum supported\r\n * value is 8, as defined by the WebGL 1 specification. `gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS`) can be used\r\n * to extract this limit. {@link CompositeTilemap} can be used to get around this limit by layering multiple tilemap\r\n * instances.\r\n *\r\n * @example\r\n * import { Tilemap } from '@pixi/tilemap';\r\n * import { Loader } from '@pixi/loaders';\r\n *\r\n * // Add the spritesheet into your loader!\r\n * Loader.shared.add('atlas', 'assets/atlas.json');\r\n *\r\n * // Make the tilemap once the tileset assets are available.\r\n * Loader.shared.load(function onTilesetLoaded()\r\n * {\r\n *      // The base-texture is shared between all the tile textures.\r\n *      const tilemap = new Tilemap([Texture.from('grass.png').baseTexture])\r\n *          .tile('grass.png', 0, 0)\r\n *          .tile('grass.png', 100, 100)\r\n *          .tile('brick_wall.png', 0, 100);\r\n * });\r\n */\r\nexport class Tilemap extends Container\r\n{\r\n    shadowColor = new Float32Array([0.0, 0.0, 0.0, 0.5]);\r\n    _globalMat: Matrix = null;\r\n\r\n    /**\r\n     * The tile animation frame.\r\n     *\r\n     * @see CompositeTilemap.tileAnim\r\n     */\r\n    public tileAnim: [number, number] = null;\r\n\r\n    /**\r\n     * This is the last uploaded size of the tilemap geometry.\r\n     * @ignore\r\n     */\r\n    modificationMarker = 0;\r\n\r\n    /** @ignore */\r\n    offsetX = 0;\r\n\r\n    /** @ignore */\r\n    offsetY = 0;\r\n\r\n    /** @ignore */\r\n    compositeParent = false;\r\n\r\n    /**\r\n     * The list of base-textures being used in the tilemap.\r\n     *\r\n     * This should not be shuffled after tiles have been added into this tilemap. Usually, only tile textures\r\n     * should be added after tiles have been added into the map.\r\n     */\r\n    protected tileset: Array<BaseTexture>;\r\n\r\n    /**\r\n     * The local bounds of the tilemap itself. This does not include DisplayObject children.\r\n     */\r\n    protected readonly tilemapBounds = new Bounds();\r\n\r\n    /** Flags whether any animated tile was added. */\r\n    protected hasAnimatedTile = false;\r\n\r\n    /** The interleaved geometry of the tilemap. */\r\n    private pointsBuf: Array<number> = [];\r\n\r\n    /**\r\n     * @param tileset - The tileset to use for the tilemap. This can be reset later with {@link Tilemap.setTileset}. The\r\n     *      base-textures in this array must not be duplicated.\r\n     */\r\n    constructor(tileset: BaseTexture | Array<BaseTexture>)\r\n    {\r\n        super();\r\n        this.setTileset(tileset);\r\n    }\r\n\r\n    /**\r\n     * @returns The tileset of this tilemap.\r\n     */\r\n    getTileset(): Array<BaseTexture>\r\n    {\r\n        return this.tileset;\r\n    }\r\n\r\n    /**\r\n     * Define the tileset used by the tilemap.\r\n     *\r\n     * @param tileset - The list of textures to use in the tilemap. If a base-texture (not array) is passed, it will\r\n     *  be wrapped into an array. This should not contain any duplicates.\r\n     */\r\n    setTileset(tileset: BaseTexture | Array<BaseTexture> = []): this\r\n    {\r\n        if (!Array.isArray(tileset))\r\n        {\r\n            tileset = [tileset];\r\n        }\r\n        for (let i = 0; i < tileset.length; i++)\r\n        {\r\n            if ((tileset[i] as unknown as Texture).baseTexture)\r\n            {\r\n                tileset[i] = (tileset[i] as unknown as Texture).baseTexture;\r\n            }\r\n        }\r\n\r\n        this.tileset = tileset;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**  Clears all the tiles added into this tilemap. */\r\n    clear(): this\r\n    {\r\n        this.pointsBuf.length = 0;\r\n        this.modificationMarker = 0;\r\n        this.tilemapBounds.clear();\r\n        this.hasAnimatedTile = false;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a tile that paints the given texture at (x, y).\r\n     *\r\n     * @param tileTexture - The tiling texture to render.\r\n     * @param x - The local x-coordinate of the tile's position.\r\n     * @param y - The local y-coordinate of the tile's position.\r\n     * @param options - Additional tile options.\r\n     * @param [options.u=texture.frame.x] - The x-coordinate of the texture in its base-texture's space.\r\n     * @param [options.v=texture.frame.y] - The y-coordinate of the texture in its base-texture's space.\r\n     * @param [options.tileWidth=texture.orig.width] - The local width of the tile.\r\n     * @param [options.tileHeight=texture.orig.height] - The local height of the tile.\r\n     * @param [options.animX=0] - For animated tiles, this is the \"offset\" along the x-axis for adjacent\r\n     *      animation frame textures in the base-texture.\r\n     * @param [options.animY=0] - For animated tiles, this is the \"offset\" along the y-axis for adjacent\r\n     *      animation frames textures in the base-texture.\r\n     * @param [options.rotate=0]\r\n     * @param [options.animCountX=1024] - For animated tiles, this is the number of animation frame textures\r\n     *      per row.\r\n     * @param [options.animCountY=1024] - For animated tiles, this is the number of animation frame textures\r\n     *      per column.\r\n     * @param [options.animDivisor=1] - For animated tiles, this is the animation duration of each frame\r\n     * @param [options.alpha=1] - Tile alpha\r\n     * @return This tilemap, good for chaining.\r\n     */\r\n    tile(\r\n        tileTexture: number | string | Texture | BaseTexture,\r\n        x: number,\r\n        y: number,\r\n        options: {\r\n            u?: number,\r\n            v?: number,\r\n            tileWidth?: number,\r\n            tileHeight?: number,\r\n            animX?: number,\r\n            animY?: number,\r\n            rotate?: number,\r\n            animCountX?: number,\r\n            animCountY?: number,\r\n            animDivisor?: number,\r\n            alpha?: number,\r\n        } = {}\r\n    ): this\r\n    {\r\n        let baseTexture: BaseTexture;\r\n        let textureIndex = -1;\r\n\r\n        if (typeof tileTexture === 'number')\r\n        {\r\n            textureIndex = tileTexture;\r\n            baseTexture = this.tileset[textureIndex];\r\n        }\r\n        else\r\n        {\r\n            let texture: Texture | BaseTexture;\r\n\r\n            if (typeof tileTexture === 'string')\r\n            {\r\n                texture = Texture.from(tileTexture);\r\n            }\r\n            else\r\n            {\r\n                texture = tileTexture;\r\n            }\r\n\r\n            const textureList = this.tileset;\r\n\r\n            for (let i = 0; i < textureList.length; i++)\r\n            {\r\n                if (textureList[i] === texture.castToBaseTexture())\r\n                {\r\n                    textureIndex = i;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if ('baseTexture' in texture)\r\n            {\r\n                options.u = options.u ?? texture.frame.x;\r\n                options.v = options.v ?? texture.frame.y;\r\n                options.tileWidth = options.tileWidth ?? texture.orig.width;\r\n                options.tileHeight = options.tileHeight ?? texture.orig.height;\r\n            }\r\n\r\n            baseTexture = texture.castToBaseTexture();\r\n        }\r\n\r\n        if (!baseTexture || textureIndex < 0)\r\n        {\r\n            console.error('The tile texture was not found in the tilemap tileset.');\r\n\r\n            return this;\r\n        }\r\n\r\n        const {\r\n            u = 0,\r\n            v = 0,\r\n            tileWidth = baseTexture.realWidth,\r\n            tileHeight = baseTexture.realHeight,\r\n            animX = 0,\r\n            animY = 0,\r\n            rotate = 0,\r\n            animCountX = 1024,\r\n            animCountY = 1024,\r\n            animDivisor = 1,\r\n            alpha = 1,\r\n        } = options;\r\n\r\n        const pb = this.pointsBuf;\r\n\r\n        this.hasAnimatedTile = this.hasAnimatedTile || animX > 0 || animY > 0;\r\n\r\n        pb.push(u);\r\n        pb.push(v);\r\n        pb.push(x);\r\n        pb.push(y);\r\n        pb.push(tileWidth);\r\n        pb.push(tileHeight);\r\n        pb.push(rotate);\r\n        pb.push(animX | 0);\r\n        pb.push(animY | 0);\r\n        pb.push(textureIndex);\r\n        pb.push(animCountX);\r\n        pb.push(animCountY);\r\n        pb.push(animDivisor);\r\n        pb.push(alpha);\r\n\r\n        this.tilemapBounds.addFramePad(x, y, x + tileWidth, y + tileHeight, 0, 0);\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Changes the rotation of the last tile. */\r\n    tileRotate(rotate: number): void\r\n    {\r\n        const pb = this.pointsBuf;\r\n\r\n        pb[pb.length - (POINT_STRUCT_SIZE - POINT_STRUCT.TEXTURE_INDEX)] = rotate;\r\n    }\r\n\r\n    /** Changes the `animX`, `animCountX` of the last tile. */\r\n    tileAnimX(offset: number, count: number): void\r\n    {\r\n        const pb = this.pointsBuf;\r\n\r\n        pb[pb.length - (POINT_STRUCT_SIZE - POINT_STRUCT.ANIM_X)] = offset;\r\n        pb[pb.length - (POINT_STRUCT_SIZE - POINT_STRUCT.ANIM_COUNT_X)] = count;\r\n        // pb[pb.length - (POINT_STRUCT_SIZE - POINT_STRUCT.ANIM_DIVISOR)] = duration;\r\n    }\r\n\r\n    /** Changes the `animY`, `animCountY` of the last tile. */\r\n    tileAnimY(offset: number, count: number): void\r\n    {\r\n        const pb = this.pointsBuf;\r\n\r\n        pb[pb.length - (POINT_STRUCT_SIZE - POINT_STRUCT.ANIM_Y)] = offset;\r\n        pb[pb.length - (POINT_STRUCT_SIZE - POINT_STRUCT.ANIM_COUNT_Y)] = count;\r\n    }\r\n\r\n    /** Changes the `animDivisor` value of the last tile. */\r\n    tileAnimDivisor(divisor: number): void\r\n    {\r\n        const pb = this.pointsBuf;\r\n\r\n        pb[pb.length - (POINT_STRUCT_SIZE - POINT_STRUCT.ANIM_DIVISOR)] = divisor;\r\n    }\r\n\r\n    tileAlpha(alpha: number): void\r\n    {\r\n        const pb = this.pointsBuf;\r\n\r\n        pb[pb.length - (POINT_STRUCT_SIZE - POINT_STRUCT.ALPHA)] = alpha;\r\n    }\r\n\r\n    renderCanvas = (renderer: any): void =>\r\n    {\r\n        const plugin = CanvasTileRenderer.getInstance(renderer);\r\n\r\n        if (plugin && !plugin.dontUseTransform)\r\n        {\r\n            const wt = this.worldTransform;\r\n\r\n            renderer.canvasContext.activeContext.setTransform(\r\n                wt.a,\r\n                wt.b,\r\n                wt.c,\r\n                wt.d,\r\n                wt.tx * renderer.resolution,\r\n                wt.ty * renderer.resolution\r\n            );\r\n        }\r\n\r\n        this.renderCanvasCore(renderer);\r\n    };\r\n\r\n    renderCanvasCore(renderer: any): void\r\n    {\r\n        if (this.tileset.length === 0) return;\r\n        const points = this.pointsBuf;\r\n        const tileAnim = this.tileAnim || (renderer.plugins.tilemap && renderer.plugins.tilemap.tileAnim);\r\n\r\n        renderer.canvasContext.activeContext.fillStyle = '#000000';\r\n        for (let i = 0, n = points.length; i < n; i += POINT_STRUCT_SIZE)\r\n        {\r\n            let x1 = points[i + POINT_STRUCT.U];\r\n            let y1 = points[i + POINT_STRUCT.V];\r\n            const x2 = points[i + POINT_STRUCT.X];\r\n            const y2 = points[i + POINT_STRUCT.Y];\r\n            const w = points[i + POINT_STRUCT.TILE_WIDTH];\r\n            const h = points[i + POINT_STRUCT.TILE_HEIGHT];\r\n\r\n            x1 += points[i + POINT_STRUCT.ANIM_X] * tileAnim[0];\r\n            y1 += points[i + POINT_STRUCT.ANIM_Y] * tileAnim[1];\r\n\r\n            const textureIndex = points[i + POINT_STRUCT.TEXTURE_INDEX];\r\n            const alpha = points[i + POINT_STRUCT.ALPHA];\r\n\r\n            // canvas does not work with rotate yet\r\n\r\n            if (textureIndex >= 0 && this.tileset[textureIndex])\r\n            {\r\n                renderer.canvasContext.activeContext.globalAlpha = alpha;\r\n                renderer.canvasContext.activeContext.drawImage(\r\n                    (this.tileset[textureIndex] as any).getDrawableSource(),\r\n                    x1, y1, w, h, x2, y2, w, h\r\n                );\r\n            }\r\n            else\r\n            {\r\n                renderer.canvasContext.activeContext.globalAlpha = 0.5;\r\n                renderer.canvasContext.activeContext.fillRect(x2, y2, w, h);\r\n            }\r\n            renderer.canvasContext.activeContext.globalAlpha = 1;\r\n        }\r\n    }\r\n\r\n    private vbId = 0;\r\n    private vb: TilemapGeometry = null;\r\n    private vbBuffer: ArrayBuffer = null;\r\n    private vbArray: Float32Array = null;\r\n    private vbInts: Uint32Array = null;\r\n\r\n    private destroyVb(): void\r\n    {\r\n        if (this.vb)\r\n        {\r\n            this.vb.destroy();\r\n            this.vb = null;\r\n        }\r\n    }\r\n\r\n    render(renderer: Renderer): void\r\n    {\r\n        const plugin = (renderer.plugins as any).tilemap;\r\n        const shader = plugin.getShader();\r\n\r\n        renderer.batch.setObjectRenderer(plugin);\r\n        this._globalMat = shader.uniforms.projTransMatrix;\r\n        renderer\r\n            .globalUniforms\r\n            .uniforms\r\n            .projectionMatrix\r\n            .copyTo(this._globalMat)\r\n            .append(this.worldTransform);\r\n\r\n        shader.uniforms.shadowColor = this.shadowColor;\r\n        shader.uniforms.animationFrame = this.tileAnim || plugin.tileAnim;\r\n\r\n        this.renderWebGLCore(renderer, plugin);\r\n    }\r\n\r\n    renderWebGLCore(renderer: Renderer, plugin: TileRenderer): void\r\n    {\r\n        const points = this.pointsBuf;\r\n\r\n        if (points.length === 0) return;\r\n        const rectsCount = points.length / POINT_STRUCT_SIZE;\r\n\r\n        const shader = plugin.getShader();\r\n        const textures = this.tileset;\r\n\r\n        if (textures.length === 0) return;\r\n\r\n        plugin.bindTileTextures(renderer, textures);\r\n        renderer.shader.bind(shader, false);\r\n\r\n        // lost context! recover!\r\n        let vb = this.vb;\r\n\r\n        if (!vb)\r\n        {\r\n            vb = plugin.createVb();\r\n            this.vb = vb;\r\n            this.vbId = (vb as any).id;\r\n            this.vbBuffer = null;\r\n            this.modificationMarker = 0;\r\n        }\r\n\r\n        plugin.checkIndexBuffer(rectsCount, vb);\r\n        const boundCountPerBuffer = settings.TEXTILE_UNITS;\r\n\r\n        const vertexBuf = vb.getBuffer('aVertexPosition');\r\n        // if layer was changed, re-upload vertices\r\n        const vertices = rectsCount * vb.vertPerQuad;\r\n\r\n        if (vertices === 0) return;\r\n        if (this.modificationMarker !== vertices)\r\n        {\r\n            this.modificationMarker = vertices;\r\n            const vs = vb.stride * vertices;\r\n\r\n            if (!this.vbBuffer || this.vbBuffer.byteLength < vs)\r\n            {\r\n                // !@#$ happens, need resize\r\n                let bk = vb.stride;\r\n\r\n                while (bk < vs)\r\n                {\r\n                    bk *= 2;\r\n                }\r\n                this.vbBuffer = new ArrayBuffer(bk);\r\n                this.vbArray = new Float32Array(this.vbBuffer);\r\n                this.vbInts = new Uint32Array(this.vbBuffer);\r\n                vertexBuf.update(this.vbBuffer);\r\n            }\r\n\r\n            const arr = this.vbArray;\r\n            // const ints = this.vbInts;\r\n            // upload vertices!\r\n            let sz = 0;\r\n            // let tint = 0xffffffff;\r\n            let textureId = 0;\r\n            let shiftU: number = this.offsetX;\r\n            let shiftV: number = this.offsetY;\r\n\r\n            // let tint = 0xffffffff;\r\n            // const tint = -1;\r\n\r\n            for (let i = 0; i < points.length; i += POINT_STRUCT_SIZE)\r\n            {\r\n                const eps = 0.5;\r\n\r\n                if (this.compositeParent)\r\n                {\r\n                    const textureIndex = points[i + POINT_STRUCT.TEXTURE_INDEX];\r\n\r\n                    if (boundCountPerBuffer > 1)\r\n                    {\r\n                        // TODO: what if its more than 4?\r\n                        textureId = (textureIndex >> 2);\r\n                        shiftU = this.offsetX * (textureIndex & 1);\r\n                        shiftV = this.offsetY * ((textureIndex >> 1) & 1);\r\n                    }\r\n                    else\r\n                    {\r\n                        textureId = textureIndex;\r\n                        shiftU = 0;\r\n                        shiftV = 0;\r\n                    }\r\n                }\r\n                const x = points[i + POINT_STRUCT.X];\r\n                const y = points[i + POINT_STRUCT.Y];\r\n                const w = points[i + POINT_STRUCT.TILE_WIDTH];\r\n                const h = points[i + POINT_STRUCT.TILE_HEIGHT];\r\n                const u = points[i + POINT_STRUCT.U] + shiftU;\r\n                const v = points[i + POINT_STRUCT.V] + shiftV;\r\n                let rotate = points[i + POINT_STRUCT.ROTATE];\r\n\r\n                const animX = points[i + POINT_STRUCT.ANIM_X];\r\n                const animY = points[i + POINT_STRUCT.ANIM_Y];\r\n                const animWidth = points[i + POINT_STRUCT.ANIM_COUNT_X] || 1024;\r\n                const animHeight = points[i + POINT_STRUCT.ANIM_COUNT_Y] || 1024;\r\n\r\n                const animXEncoded = animX + (animWidth * 2048);\r\n                const animYEncoded = animY + (animHeight * 2048);\r\n                const animDivisor = points[i + POINT_STRUCT.ANIM_DIVISOR];\r\n                const alpha = points[i + POINT_STRUCT.ALPHA];\r\n\r\n                let u0: number;\r\n                let v0: number; let u1: number;\r\n                let v1: number; let u2: number;\r\n                let v2: number; let u3: number;\r\n                let v3: number;\r\n\r\n                if (rotate === 0)\r\n                {\r\n                    u0 = u;\r\n                    v0 = v;\r\n                    u1 = u + w;\r\n                    v1 = v;\r\n                    u2 = u + w;\r\n                    v2 = v + h;\r\n                    u3 = u;\r\n                    v3 = v + h;\r\n                }\r\n                else\r\n                {\r\n                    let w2 = w / 2;\r\n                    let h2 = h / 2;\r\n\r\n                    if (rotate % 4 !== 0)\r\n                    {\r\n                        w2 = h / 2;\r\n                        h2 = w / 2;\r\n                    }\r\n                    const cX = u + w2;\r\n                    const cY = v + h2;\r\n\r\n                    rotate = groupD8.add(rotate, groupD8.NW);\r\n                    u0 = cX + (w2 * groupD8.uX(rotate));\r\n                    v0 = cY + (h2 * groupD8.uY(rotate));\r\n\r\n                    rotate = groupD8.add(rotate, 2); // rotate 90 degrees clockwise\r\n                    u1 = cX + (w2 * groupD8.uX(rotate));\r\n                    v1 = cY + (h2 * groupD8.uY(rotate));\r\n\r\n                    rotate = groupD8.add(rotate, 2);\r\n                    u2 = cX + (w2 * groupD8.uX(rotate));\r\n                    v2 = cY + (h2 * groupD8.uY(rotate));\r\n\r\n                    rotate = groupD8.add(rotate, 2);\r\n                    u3 = cX + (w2 * groupD8.uX(rotate));\r\n                    v3 = cY + (h2 * groupD8.uY(rotate));\r\n                }\r\n\r\n                arr[sz++] = x;\r\n                arr[sz++] = y;\r\n                arr[sz++] = u0;\r\n                arr[sz++] = v0;\r\n                arr[sz++] = u + eps;\r\n                arr[sz++] = v + eps;\r\n                arr[sz++] = u + w - eps;\r\n                arr[sz++] = v + h - eps;\r\n                arr[sz++] = animXEncoded;\r\n                arr[sz++] = animYEncoded;\r\n                arr[sz++] = textureId;\r\n                arr[sz++] = animDivisor;\r\n                arr[sz++] = alpha;\r\n\r\n                arr[sz++] = x + w;\r\n                arr[sz++] = y;\r\n                arr[sz++] = u1;\r\n                arr[sz++] = v1;\r\n                arr[sz++] = u + eps;\r\n                arr[sz++] = v + eps;\r\n                arr[sz++] = u + w - eps;\r\n                arr[sz++] = v + h - eps;\r\n                arr[sz++] = animXEncoded;\r\n                arr[sz++] = animYEncoded;\r\n                arr[sz++] = textureId;\r\n                arr[sz++] = animDivisor;\r\n                arr[sz++] = alpha;\r\n\r\n                arr[sz++] = x + w;\r\n                arr[sz++] = y + h;\r\n                arr[sz++] = u2;\r\n                arr[sz++] = v2;\r\n                arr[sz++] = u + eps;\r\n                arr[sz++] = v + eps;\r\n                arr[sz++] = u + w - eps;\r\n                arr[sz++] = v + h - eps;\r\n                arr[sz++] = animXEncoded;\r\n                arr[sz++] = animYEncoded;\r\n                arr[sz++] = textureId;\r\n                arr[sz++] = animDivisor;\r\n                arr[sz++] = alpha;\r\n\r\n                arr[sz++] = x;\r\n                arr[sz++] = y + h;\r\n                arr[sz++] = u3;\r\n                arr[sz++] = v3;\r\n                arr[sz++] = u + eps;\r\n                arr[sz++] = v + eps;\r\n                arr[sz++] = u + w - eps;\r\n                arr[sz++] = v + h - eps;\r\n                arr[sz++] = animXEncoded;\r\n                arr[sz++] = animYEncoded;\r\n                arr[sz++] = textureId;\r\n                arr[sz++] = animDivisor;\r\n                arr[sz++] = alpha;\r\n            }\r\n\r\n            vertexBuf.update(arr);\r\n        }\r\n\r\n        (renderer.geometry as any).bind(vb, shader);\r\n        renderer.geometry.draw(DRAW_MODES.TRIANGLES, rectsCount * 6, 0);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @ignore\r\n     */\r\n    isModified(anim: boolean): boolean\r\n    {\r\n        if (this.modificationMarker !== this.pointsBuf.length\r\n            || (anim && this.hasAnimatedTile))\r\n        {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * This will pull forward the modification marker.\r\n     *\r\n     * @internal\r\n     * @ignore\r\n     */\r\n    clearModify(): void\r\n    {\r\n        this.modificationMarker = this.pointsBuf.length;\r\n    }\r\n\r\n    /** @override */\r\n    protected _calculateBounds(): void\r\n    {\r\n        const { minX, minY, maxX, maxY } = this.tilemapBounds;\r\n\r\n        this._bounds.addFrame(this.transform, minX, minY, maxX, maxY);\r\n    }\r\n\r\n    /** @override */\r\n    public getLocalBounds(rect?: Rectangle): Rectangle\r\n    {\r\n        // we can do a fast local bounds if the sprite has no children!\r\n        if (this.children.length === 0)\r\n        {\r\n            return this.tilemapBounds.getRectangle(rect);\r\n        }\r\n\r\n        return super.getLocalBounds.call(this, rect);\r\n    }\r\n\r\n    /** @override */\r\n    destroy(options?: IDestroyOptions): void\r\n    {\r\n        super.destroy(options);\r\n        this.destroyVb();\r\n    }\r\n\r\n    /**\r\n     * Deprecated signature for {@link Tilemap.tile tile}.\r\n     *\r\n     * @deprecated Since @pixi/tilemap 3.\r\n     */\r\n    addFrame(texture: Texture | string | number, x: number, y: number, animX: number, animY: number): boolean\r\n    {\r\n        this.tile(\r\n            texture,\r\n            x,\r\n            y,\r\n            {\r\n                animX,\r\n                animY,\r\n            }\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Deprecated signature for {@link Tilemap.tile tile}.\r\n     *\r\n     * @deprecated Since @pixi/tilemap 3.\r\n     */\r\n    // eslint-disable-next-line max-params\r\n    addRect(\r\n        textureIndex: number,\r\n        u: number,\r\n        v: number,\r\n        x: number,\r\n        y: number,\r\n        tileWidth: number,\r\n        tileHeight: number,\r\n        animX = 0,\r\n        animY = 0,\r\n        rotate = 0,\r\n        animCountX = 1024,\r\n        animCountY = 1024,\r\n        animDivisor = 1,\r\n        alpha = 1,\r\n    ): this\r\n    {\r\n        return this.tile(\r\n            textureIndex,\r\n            x, y,\r\n            {\r\n                u, v, tileWidth, tileHeight, animX, animY, rotate, animCountX, animCountY, animDivisor, alpha\r\n            }\r\n        );\r\n    }\r\n}\r\n","import { Container } from '@pixi/display';\r\nimport { Texture, Renderer, BaseTexture, Matrix } from '@pixi/core';\r\nimport { Tilemap } from './Tilemap';\r\nimport { settings } from './settings';\r\nimport { CanvasTileRenderer } from './CanvasTileRenderer';\r\n\r\nimport type { TileRenderer } from './TileRenderer';\r\n\r\n/**\r\n * A tilemap composite that lazily builds tilesets layered into multiple tilemaps.\r\n *\r\n * The composite tileset is the concatenatation of the individual tilesets used in the tilemaps. You can\r\n * preinitialized it by passing a list of tile textures to the constructor. Otherwise, the composite tilemap\r\n * is lazily built as you add more tiles with newer tile textures. A new tilemap is created once the last\r\n * tilemap has reached its limit (as set by {@link CompositeTilemap.texturesPerTilemap texturesPerTilemap}).\r\n *\r\n * @example\r\n * import { Application } from '@pixi/app';\r\n * import { CompositeTilemap } from '@pixi/tilemap';\r\n * import { Loader } from '@pixi/loaders';\r\n *\r\n * // Setup view & stage.\r\n * const app = new Application();\r\n *\r\n * document.body.appendChild(app.renderer.view);\r\n * app.stage.interactive = true;\r\n *\r\n * // Global reference to the tilemap.\r\n * let globalTilemap: CompositeTilemap;\r\n *\r\n * // Load the tileset spritesheet!\r\n * Loader.shared.load('atlas.json');\r\n *\r\n * // Initialize the tilemap scene when the assets load.\r\n * Loader.shared.load(function onTilesetLoaded()\r\n * {\r\n *      const tilemap = new CompositeTilemap();\r\n *\r\n *      // Setup the game level with grass and dungeons!\r\n *      for (let x = 0; x < 10; x++)\r\n *      {\r\n *          for (let y = 0; y < 10; y++)\r\n *          {\r\n *              tilemap.tile(\r\n *                  x % 2 === 0 && (x === y || x + y === 10) ? 'dungeon.png' : 'grass.png',\r\n *                  x * 100,\r\n *                  y * 100,\r\n *              );\r\n *          }\r\n *      }\r\n *\r\n *      globalTilemap = app.stage.addChild(tilemap);\r\n * });\r\n *\r\n * // Show a bomb at a random location whenever the user clicks!\r\n * app.stage.on('click', function onClick()\r\n * {\r\n *      if (!globalTilemap) return;\r\n *\r\n *      const x = Math.floor(Math.random() * 10);\r\n *      const y = Math.floor(Math.random() * 10);\r\n *\r\n *      globalTilemap.tile('bomb.png', x * 100, y * 100);\r\n * });\r\n */\r\nexport class CompositeTilemap extends Container\r\n{\r\n    /** The hard limit on the number of tile textures used in each tilemap. */\r\n    public readonly texturesPerTilemap: number;\r\n\r\n    /**\r\n     * The animation frame vector.\r\n     *\r\n     * Animated tiles have four parameters - `animX`, `animY`, `animCountX`, `animCountY`. The textures\r\n     * of adjacent animation frames are at offset `animX` or `animY` of each other, with `animCountX` per\r\n     * row and `animCountY` per column.\r\n     *\r\n     * The animation frame vector specifies which animation frame texture to use. If the x/y coordinate is\r\n     * larger than the `animCountX` or `animCountY` for a specific tile, the modulus is taken.\r\n     */\r\n    public tileAnim: [number, number] = null;\r\n\r\n    /** The last modified tilemap. */\r\n    protected lastModifiedTilemap: Tilemap = null;\r\n\r\n    private modificationMarker = 0;\r\n    private shadowColor = new Float32Array([0.0, 0.0, 0.0, 0.5]);\r\n    private _globalMat: Matrix = null;\r\n\r\n    /**\r\n     * @param tileset - A list of tile base-textures that will be used to eagerly initialized the layered\r\n     *  tilemaps. This is only an performance optimization, and using {@link CompositeTilemap.tile tile}\r\n     *  will work equivalently.\r\n     */\r\n    constructor(tileset?: Array<BaseTexture>)\r\n    {\r\n        super();\r\n\r\n        this.tileset(tileset);\r\n        this.texturesPerTilemap = settings.TEXTURES_PER_TILEMAP;\r\n    }\r\n\r\n    /**\r\n     * This will preinitialize the tilesets of the layered tilemaps.\r\n     *\r\n     * If used after a tilemap has been created (or a tile added), this will overwrite the tile textures of the\r\n     * existing tilemaps. Passing the tileset to the constructor instead is the best practice.\r\n     *\r\n     * @param tileTextures - The list of tile textures that make up the tileset.\r\n     */\r\n    tileset(tileTextures: Array<BaseTexture>): this\r\n    {\r\n        if (!tileTextures)\r\n        {\r\n            tileTextures = [];\r\n        }\r\n\r\n        const texPerChild = this.texturesPerTilemap;\r\n        const len1 = this.children.length;\r\n        const len2 = Math.ceil(tileTextures.length / texPerChild);\r\n\r\n        for (let i = 0; i < Math.min(len1, len2); i++)\r\n        {\r\n            (this.children[i] as Tilemap).setTileset(\r\n                tileTextures.slice(i * texPerChild, (i + 1) * texPerChild)\r\n            );\r\n        }\r\n        for (let i = len1; i < len2; i++)\r\n        {\r\n            const tilemap = new Tilemap(tileTextures.slice(i * texPerChild, (i + 1) * texPerChild));\r\n\r\n            tilemap.compositeParent = true;\r\n            tilemap.offsetX = settings.TEXTILE_DIMEN;\r\n            tilemap.offsetY = settings.TEXTILE_DIMEN;\r\n\r\n            // TODO: Don't use children\r\n            this.addChild(tilemap);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Clears the tilemap composite. */\r\n    clear(): this\r\n    {\r\n        for (let i = 0; i < this.children.length; i++)\r\n        {\r\n            (this.children[i] as Tilemap).clear();\r\n        }\r\n\r\n        this.modificationMarker = 0;\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Changes the rotation of the last added tile. */\r\n    tileRotate(rotate: number): this\r\n    {\r\n        if (this.lastModifiedTilemap)\r\n        {\r\n            this.lastModifiedTilemap.tileRotate(rotate);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Changes `animX`, `animCountX` of the last added tile. */\r\n    tileAnimX(offset: number, count: number): this\r\n    {\r\n        if (this.lastModifiedTilemap)\r\n        {\r\n            this.lastModifiedTilemap.tileAnimX(offset, count);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Changes `animY`, `animCountY` of the last added tile. */\r\n    tileAnimY(offset: number, count: number): this\r\n    {\r\n        if (this.lastModifiedTilemap)\r\n        {\r\n            this.lastModifiedTilemap.tileAnimY(offset, count);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Changes `tileAnimDivisor` value of the last added tile. */\r\n    tileAnimDivisor(divisor: number): this\r\n    {\r\n        if (this.lastModifiedTilemap)\r\n        {\r\n            this.lastModifiedTilemap.tileAnimDivisor(divisor);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a tile that paints the given tile texture at (x, y).\r\n     *\r\n     * @param tileTexture - The tile texture. You can pass an index into the composite tilemap as well.\r\n     * @param x - The local x-coordinate of the tile's location.\r\n     * @param y - The local y-coordinate of the tile's location.\r\n     * @param options - Additional options to pass to {@link Tilemap.tile}.\r\n     * @param [options.u=texture.frame.x] - The x-coordinate of the texture in its base-texture's space.\r\n     * @param [options.v=texture.frame.y] - The y-coordinate of the texture in its base-texture's space.\r\n     * @param [options.tileWidth=texture.orig.width] - The local width of the tile.\r\n     * @param [options.tileHeight=texture.orig.height] - The local height of the tile.\r\n     * @param [options.animX=0] - For animated tiles, this is the \"offset\" along the x-axis for adjacent\r\n     *      animation frame textures in the base-texture.\r\n     * @param [options.animY=0] - For animated tiles, this is the \"offset\" along the y-axis for adjacent\r\n     *      animation frames textures in the base-texture.\r\n     * @param [options.rotate=0]\r\n     * @param [options.animCountX=1024] - For animated tiles, this is the number of animation frame textures\r\n     *      per row.\r\n     * @param [options.animCountY=1024] - For animated tiles, this is the number of animation frame textures\r\n     *      per column.\r\n     * @param [options.animDivisor=1] - For animated tiles, this is the animation duration each frame\r\n     * @param [options.alpha=1] - Tile alpha\r\n     * @return This tilemap, good for chaining.\r\n     */\r\n    tile(\r\n        tileTexture: Texture | string | number,\r\n        x: number,\r\n        y: number,\r\n        options: {\r\n            u?: number,\r\n            v?: number,\r\n            tileWidth?: number,\r\n            tileHeight?: number,\r\n            animX?: number,\r\n            animY?: number,\r\n            rotate?: number,\r\n            animCountX?: number,\r\n            animCountY?: number,\r\n            animDivisor?: number,\r\n            alpha?: number,\r\n        } = {}\r\n    ): this\r\n    {\r\n        let tilemap: Tilemap = null;\r\n        const children = this.children;\r\n\r\n        this.lastModifiedTilemap = null;\r\n\r\n        if (typeof tileTexture === 'number')\r\n        {\r\n            const childIndex = tileTexture / this.texturesPerTilemap >> 0;\r\n            let tileIndex = 0;\r\n\r\n            tilemap = children[childIndex] as Tilemap;\r\n\r\n            if (!tilemap)\r\n            {\r\n                tilemap = children[0] as Tilemap;\r\n\r\n                // Silently fail if the tilemap doesn't exist\r\n                if (!tilemap) return this;\r\n\r\n                tileIndex = 0;\r\n            }\r\n            else\r\n            {\r\n                tileIndex = tileTexture % this.texturesPerTilemap;\r\n            }\r\n\r\n            tilemap.tile(\r\n                tileIndex,\r\n                x,\r\n                y,\r\n                options,\r\n            );\r\n        }\r\n        else\r\n        {\r\n            if (typeof tileTexture === 'string')\r\n            {\r\n                tileTexture = Texture.from(tileTexture);\r\n            }\r\n\r\n            // Probe all tilemaps to find which tileset contains the base-texture.\r\n            for (let i = 0; i < children.length; i++)\r\n            {\r\n                const child = children[i] as Tilemap;\r\n                const tex = child.getTileset();\r\n\r\n                for (let j = 0; j < tex.length; j++)\r\n                {\r\n                    if (tex[j] === tileTexture.baseTexture)\r\n                    {\r\n                        tilemap = child;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (tilemap)\r\n                {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // If no tileset contains the base-texture, attempt to add it.\r\n            if (!tilemap)\r\n            {\r\n                // Probe the tilemaps to find one below capacity. If so, add the texture into that tilemap.\r\n                for (let i = children.length - 1; i >= 0; i--)\r\n                {\r\n                    const child = children[i] as Tilemap;\r\n\r\n                    if (child.getTileset().length < this.texturesPerTilemap)\r\n                    {\r\n                        tilemap = child;\r\n                        child.getTileset().push(tileTexture.baseTexture);\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                // Otherwise, create a new tilemap initialized with that tile texture.\r\n                if (!tilemap)\r\n                {\r\n                    tilemap = new Tilemap(tileTexture.baseTexture);\r\n                    tilemap.compositeParent = true;\r\n                    tilemap.offsetX = settings.TEXTILE_DIMEN;\r\n                    tilemap.offsetY = settings.TEXTILE_DIMEN;\r\n\r\n                    this.addChild(tilemap);\r\n                }\r\n            }\r\n\r\n            tilemap.tile(\r\n                tileTexture,\r\n                x,\r\n                y,\r\n                options,\r\n            );\r\n        }\r\n\r\n        this.lastModifiedTilemap = tilemap;\r\n\r\n        return this;\r\n    }\r\n\r\n    renderCanvas(renderer: any): void\r\n    {\r\n        if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\r\n        {\r\n            return;\r\n        }\r\n\r\n        const tilemapPlugin = CanvasTileRenderer.getInstance(renderer);\r\n\r\n        if (tilemapPlugin && !tilemapPlugin.dontUseTransform)\r\n        {\r\n            const wt = this.worldTransform;\r\n\r\n            renderer.canvasContext.activeContext.setTransform(\r\n                wt.a,\r\n                wt.b,\r\n                wt.c,\r\n                wt.d,\r\n                wt.tx * renderer.resolution,\r\n                wt.ty * renderer.resolution\r\n            );\r\n        }\r\n\r\n        const layers = this.children;\r\n\r\n        for (let i = 0; i < layers.length; i++)\r\n        {\r\n            const layer = (layers[i] as Tilemap);\r\n\r\n            layer.tileAnim = this.tileAnim;\r\n            layer.renderCanvasCore(renderer);\r\n        }\r\n    }\r\n\r\n    render(renderer: Renderer): void\r\n    {\r\n        if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\r\n        {\r\n            return;\r\n        }\r\n\r\n        const plugin = renderer.plugins.tilemap as TileRenderer;\r\n        const shader = plugin.getShader();\r\n\r\n        renderer.batch.setObjectRenderer(plugin);\r\n\r\n        // TODO: dont create new array, please\r\n        this._globalMat = shader.uniforms.projTransMatrix;\r\n        renderer.globalUniforms.uniforms.projectionMatrix.copyTo(this._globalMat).append(this.worldTransform);\r\n        shader.uniforms.shadowColor = this.shadowColor;\r\n        shader.uniforms.animationFrame = this.tileAnim || plugin.tileAnim;\r\n\r\n        renderer.shader.bind(shader, false);\r\n\r\n        const layers = this.children;\r\n\r\n        for (let i = 0; i < layers.length; i++)\r\n        {\r\n            (layers[i] as Tilemap).renderWebGLCore(renderer, plugin);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @ignore\r\n     */\r\n    isModified(anim: boolean): boolean\r\n    {\r\n        const layers = this.children;\r\n\r\n        if (this.modificationMarker !== layers.length)\r\n        {\r\n            return true;\r\n        }\r\n        for (let i = 0; i < layers.length; i++)\r\n        {\r\n            if ((layers[i] as Tilemap).isModified(anim))\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @ignore\r\n     */\r\n    clearModify(): void\r\n    {\r\n        const layers = this.children;\r\n\r\n        this.modificationMarker = layers.length;\r\n        for (let i = 0; i < layers.length; i++)\r\n        {\r\n            (layers[i] as Tilemap).clearModify();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @deprecated Since @pixi/tilemap 3.\r\n     * @see CompositeTilemap.tile\r\n     */\r\n    addFrame(\r\n        texture: Texture | string | number,\r\n        x: number,\r\n        y: number,\r\n        animX?: number,\r\n        animY?: number,\r\n        animWidth?: number,\r\n        animHeight?: number,\r\n        animDivisor?: number,\r\n        alpha?: number\r\n    ): this\r\n    {\r\n        return this.tile(\r\n            texture,\r\n            x, y,\r\n            {\r\n                animX,\r\n                animY,\r\n                animCountX: animWidth,\r\n                animCountY: animHeight,\r\n                animDivisor,\r\n                alpha\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @deprecated @pixi/tilemap 3\r\n     * @see CompositeTilemap.tile\r\n     */\r\n    // eslint-disable-next-line max-params\r\n    addRect(\r\n        textureIndex: number,\r\n        u: number,\r\n        v: number,\r\n        x: number,\r\n        y: number,\r\n        tileWidth: number,\r\n        tileHeight: number,\r\n        animX?: number,\r\n        animY?: number,\r\n        rotate?: number,\r\n        animWidth?: number,\r\n        animHeight?: number\r\n    ): this\r\n    {\r\n        const childIndex: number = textureIndex / this.texturesPerTilemap >> 0;\r\n        const textureId: number = textureIndex % this.texturesPerTilemap;\r\n\r\n        if (this.children[childIndex] && (this.children[childIndex] as Tilemap).getTileset())\r\n        {\r\n            this.lastModifiedTilemap = (this.children[childIndex] as Tilemap);\r\n            this.lastModifiedTilemap.addRect(\r\n                textureId, u, v, x, y, tileWidth, tileHeight, animX, animY, rotate, animWidth, animHeight\r\n            );\r\n        }\r\n        else\r\n        {\r\n            this.lastModifiedTilemap = null;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Alias for {@link CompositeTilemap.tileset tileset}.\r\n     *\r\n     * @deprecated Since @pixi/tilemap 3.\r\n     */\r\n    setBitmaps = this.tileset;\r\n\r\n    /**\r\n     * @deprecated Since @pixi/tilemap 3.\r\n     * @readonly\r\n     * @see CompositeTilemap.texturesPerTilemap\r\n     */\r\n    get texPerChild(): number { return this.texturesPerTilemap; }\r\n}\r\n","import { BaseTexture, Renderer, Resource, Texture, GLTexture, ALPHA_MODES } from '@pixi/core';\r\nimport { settings } from './settings';\r\n\r\nexport interface TextileOptions\r\n{\r\n    TEXTILE_DIMEN: number;\r\n    TEXTILE_UNITS: number;\r\n    DO_CLEAR?: boolean;\r\n}\r\n\r\ntype TextureTile = {\r\n    dirtyId: number;\r\n    x: number;\r\n    y: number;\r\n    baseTexture: BaseTexture;\r\n};\r\n\r\n// For some reason ESLint goes mad with indendation in this file ^&^\r\n/* eslint-disable indent */\r\n\r\n/**\r\n * This texture tiling resource can be used to upload multiple base-textures together.\r\n *\r\n * This resource combines multiple base-textures into a \"textile\". They're laid out in\r\n * a dual column format, placed in row-order order. The size of each tile is predefined,\r\n * and defaults to {@link settings.TEXTILE_DIMEN}. This means that each input base-texture\r\n * must is smaller than that along both its width and height.\r\n *\r\n * @see settings.TEXTILE_UNITS\r\n */\r\nexport class TextileResource extends Resource\r\n{\r\n    /** The base-texture that contains all the texture tiles. */\r\n    public baseTexture: BaseTexture = null;\r\n\r\n    private readonly doClear: boolean;\r\n    private readonly tileDimen: number;\r\n    private readonly tiles: Array<TextureTile>;\r\n\r\n    private _clearBuffer: Uint8Array = null;\r\n\r\n    /**\r\n\t * @param options - This will default to the \"settings\" exported by @pixi/tilemap.\r\n\t * @param options.TEXTILE_DIMEN - The dimensions of each tile.\r\n\t * @param options.TEXTILE_UNITS - The number of texture tiles.\r\n\t */\r\n    constructor(options: TextileOptions = settings)\r\n    {\r\n        super(\r\n            options.TEXTILE_DIMEN * 2,\r\n            options.TEXTILE_DIMEN * Math.ceil(options.TEXTILE_UNITS / 2),\r\n        );\r\n\r\n        const tiles: TextureTile[] = this.tiles = new Array(options.TEXTILE_UNITS);\r\n\r\n        this.doClear = !!options.DO_CLEAR;\r\n        this.tileDimen = options.TEXTILE_DIMEN;\r\n\r\n        for (let j = 0; j < options.TEXTILE_UNITS; j++)\r\n        {\r\n            tiles[j] = {\r\n                dirtyId: 0,\r\n                x: options.TEXTILE_DIMEN * (j & 1),\r\n                y: options.TEXTILE_DIMEN * (j >> 1),\r\n                baseTexture: Texture.WHITE.baseTexture,\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n\t * Sets the texture to be uploaded for the given tile.\r\n\t *\r\n\t * @param index - The index of the tile being set.\r\n\t * @param texture - The texture with the base-texture to upload.\r\n\t */\r\n    tile(index: number, texture: BaseTexture): void\r\n    {\r\n        const tile = this.tiles[index];\r\n\r\n        if (tile.baseTexture === texture)\r\n        {\r\n            return;\r\n        }\r\n\r\n        tile.baseTexture = texture;\r\n        this.baseTexture.update();\r\n\r\n        this.tiles[index].dirtyId = (this.baseTexture as any).dirtyId;\r\n    }\r\n\r\n    /** @override */\r\n    bind(baseTexture: BaseTexture): void\r\n    {\r\n        if (this.baseTexture)\r\n        {\r\n            throw new Error('Only one baseTexture is allowed for this resource!');\r\n        }\r\n\r\n        this.baseTexture = baseTexture;\r\n        super.bind(baseTexture);\r\n    }\r\n\r\n    /** @override */\r\n    upload(renderer: Renderer, texture: BaseTexture, glTexture: GLTexture): boolean\r\n    {\r\n        const { gl } = renderer;\r\n        const { width, height } = this;\r\n\r\n        gl.pixelStorei(\r\n            gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,\r\n            texture.alphaMode === undefined || texture.alphaMode === ALPHA_MODES.UNPACK\r\n        );\r\n\r\n        if (glTexture.dirtyId < 0)\r\n        {\r\n            (glTexture as any).width = width;\r\n            (glTexture as any).height = height;\r\n\r\n            gl.texImage2D(texture.target, 0,\r\n                texture.format,\r\n                width,\r\n                height,\r\n                0,\r\n                texture.format,\r\n                texture.type,\r\n                null);\r\n        }\r\n\r\n        const doClear = this.doClear;\r\n        const tiles = this.tiles;\r\n\r\n        if (doClear && !this._clearBuffer)\r\n        {\r\n            this._clearBuffer = new Uint8Array(settings.TEXTILE_DIMEN * settings.TEXTILE_DIMEN * 4);\r\n        }\r\n\r\n        for (let i = 0; i < tiles.length; i++)\r\n        {\r\n            const spr = tiles[i];\r\n            const tex = spr.baseTexture;\r\n\r\n            if (glTexture.dirtyId >= this.tiles[i].dirtyId)\r\n            {\r\n                continue;\r\n            }\r\n\r\n            const res = tex.resource as any;\r\n\r\n            if (!tex.valid || !res || !res.source)\r\n            {\r\n                continue;\r\n            }\r\n            if (doClear && (tex.width < this.tileDimen || tex.height < this.tileDimen))\r\n            {\r\n                gl.texSubImage2D(texture.target, 0,\r\n                    spr.x,\r\n                    spr.y,\r\n                    this.tileDimen,\r\n                    this.tileDimen,\r\n                    texture.format,\r\n                    texture.type,\r\n                    this._clearBuffer);\r\n            }\r\n\r\n            gl.texSubImage2D(texture.target, 0,\r\n                spr.x,\r\n                spr.y,\r\n                texture.format,\r\n                texture.type,\r\n                res.source);\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","import type { TilemapShader } from './TilemapShader';\r\n\r\n/**\r\n * This will generate fragment shader code that samples the correct texture into the \"color\" variable.\r\n *\r\n * @internal\r\n * @ignore\r\n * @param maxTextures - The texture array length in the shader's uniforms.\r\n */\r\nfunction generateSampleSrc(maxTextures: number): string\r\n{\r\n    let src = '';\r\n\r\n    src += '\\n';\r\n    src += '\\n';\r\n\r\n    src += 'if(vTextureId <= -1.0) {';\r\n    src += '\\n\\tcolor = shadowColor;';\r\n    src += '\\n}';\r\n\r\n    for (let i = 0; i < maxTextures; i++)\r\n    {\r\n        src += '\\nelse ';\r\n\r\n        if (i < maxTextures - 1)\r\n        {\r\n            src += `if(textureId == ${i}.0)`;\r\n        }\r\n\r\n        src += '\\n{';\r\n        src += `\\n\\tcolor = texture2D(uSamplers[${i}], textureCoord * uSamplerSize[${i}]);`;\r\n        src += '\\n}';\r\n    }\r\n\r\n    src += '\\n';\r\n    src += '\\n';\r\n\r\n    return src;\r\n}\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * @param shader\r\n * @param maxTextures\r\n */\r\nexport function fillSamplers(shader: TilemapShader, maxTextures: number): void\r\n{\r\n    const sampleValues: Array<number> = [];\r\n\r\n    for (let i = 0; i < maxTextures; i++)\r\n    {\r\n        sampleValues[i] = i;\r\n    }\r\n\r\n    shader.uniforms.uSamplers = sampleValues;\r\n\r\n    const samplerSize: Array<number> = [];\r\n\r\n    for (let i = 0; i < maxTextures; i++)\r\n    {\r\n        // These are overwritten by TileRenderer when textures actually bound.\r\n        samplerSize.push(1.0 / 2048);\r\n        samplerSize.push(1.0 / 2048);\r\n    }\r\n\r\n    shader.uniforms.uSamplerSize = samplerSize;\r\n}\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * @param maxTextures\r\n * @param fragmentSrc\r\n * @returns\r\n */\r\nexport function generateFragmentSrc(maxTextures: number, fragmentSrc: string): string\r\n{\r\n    return fragmentSrc.replace(/%count%/gi, `${maxTextures}`)\r\n        .replace(/%forloop%/gi, generateSampleSrc(maxTextures));\r\n}\r\n","// eslint-disable-next-line @typescript-eslint/triple-slash-reference, spaced-comment\r\n///<reference path=\"../global.d.ts\" />\r\n\r\nimport * as shaderGenerator from './shaderGenerator';\r\n\r\nconst tilemapVertexTemplateSrc = `#version 100\r\nprecision highp float;\r\nattribute vec2 aVertexPosition;\r\nattribute vec2 aTextureCoord;\r\nattribute vec4 aFrame;\r\nattribute vec2 aAnim;\r\nattribute float aAnimDivisor;\r\nattribute float aTextureId;\r\nattribute float aAlpha;\r\n\r\nuniform mat3 projTransMatrix;\r\nuniform vec2 animationFrame;\r\n\r\nvarying vec2 vTextureCoord;\r\nvarying float vTextureId;\r\nvarying vec4 vFrame;\r\nvarying float vAlpha;\r\n\r\nvoid main(void)\r\n{\r\n   gl_Position = vec4((projTransMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\r\n   vec2 animCount = floor((aAnim + 0.5) / 2048.0);\r\n   vec2 animFrameOffset = aAnim - animCount * 2048.0;\r\n   vec2 currentFrame = floor(animationFrame / aAnimDivisor);\r\n   vec2 animOffset = animFrameOffset * floor(mod(currentFrame + 0.5, animCount));\r\n\r\n   vTextureCoord = aTextureCoord + animOffset;\r\n   vFrame = aFrame + vec4(animOffset, animOffset);\r\n   vTextureId = aTextureId;\r\n   vAlpha = aAlpha;\r\n}\r\n`;\r\n\r\nconst tilemapFragmentTemplateSrc = `#version 100\r\n#ifdef GL_FRAGMENT_PRECISION_HIGH\r\nprecision highp float;\r\n#else\r\nprecision mediump float;\r\n#endif\r\nvarying vec2 vTextureCoord;\r\nvarying vec4 vFrame;\r\nvarying float vTextureId;\r\nvarying float vAlpha;\r\nuniform vec4 shadowColor;\r\nuniform sampler2D uSamplers[%count%];\r\nuniform vec2 uSamplerSize[%count%];\r\n\r\nvoid main(void)\r\n{\r\n   vec2 textureCoord = clamp(vTextureCoord, vFrame.xy, vFrame.zw);\r\n   float textureId = floor(vTextureId + 0.5);\r\n\r\n   vec4 color;\r\n   %forloop%\r\n   gl_FragColor = color * vAlpha;\r\n}\r\n`;\r\n\r\nimport { Buffer, Geometry, Shader, Program, Matrix } from '@pixi/core';\r\n\r\n// For some reason ESLint goes mad with indendation in this file ^&^\r\n/* eslint-disable no-mixed-spaces-and-tabs, indent */\r\n\r\nexport class TilemapShader extends Shader\r\n{\r\n    maxTextures = 0;\r\n\r\n    constructor(maxTextures: number)\r\n    {\r\n\t    super(\r\n\t        new Program(\r\n                tilemapVertexTemplateSrc,\r\n                shaderGenerator.generateFragmentSrc(maxTextures, tilemapFragmentTemplateSrc)\r\n            ),\r\n\t        {\r\n\t            animationFrame: new Float32Array(2),\r\n\t            uSamplers: [],\r\n\t            uSamplerSize: [],\r\n\t            projTransMatrix: new Matrix()\r\n\t        }\r\n\t    );\r\n\r\n\t    this.maxTextures = maxTextures;\r\n\t    shaderGenerator.fillSamplers(this, this.maxTextures);\r\n    }\r\n}\r\n\r\nexport class TilemapGeometry extends Geometry\r\n{\r\n    vertSize = 13;\r\n    vertPerQuad = 4;\r\n    stride = this.vertSize * 4;\r\n    lastTimeAccess = 0;\r\n\r\n    constructor()\r\n    {\r\n\t    super();\r\n\r\n\t    const buf = this.buf = new Buffer(new Float32Array(2), true, false);\r\n\r\n\t    this.addAttribute('aVertexPosition', buf, 0, false, 0, this.stride, 0)\r\n\t        .addAttribute('aTextureCoord', buf, 0, false, 0, this.stride, 2 * 4)\r\n\t        .addAttribute('aFrame', buf, 0, false, 0, this.stride, 4 * 4)\r\n\t        .addAttribute('aAnim', buf, 0, false, 0, this.stride, 8 * 4)\r\n\t        .addAttribute('aTextureId', buf, 0, false, 0, this.stride, 10 * 4)\r\n            .addAttribute('aAnimDivisor', buf, 0, false, 0, this.stride, 11 * 4)\r\n            .addAttribute('aAlpha', buf, 0, false, 0, this.stride, 12 * 4);\r\n    }\r\n\r\n    buf: Buffer;\r\n}\r\n","import { BaseTexture, Buffer, ObjectRenderer, Renderer, utils, WRAP_MODES } from '@pixi/core';\r\nimport { settings } from './settings';\r\nimport { TilemapGeometry, TilemapShader } from './TilemapShader';\r\nimport { TextileResource } from './TextileResource';\r\n\r\n// For some reason ESLint goes mad with indendation in this file ^&^\r\n/* eslint-disable no-mixed-spaces-and-tabs, indent */\r\n\r\n/**\r\n * Rendering helper pipeline for tilemaps. This plugin is registered automatically.\r\n */\r\nexport class TileRenderer extends ObjectRenderer\r\n{\r\n    /** The managing renderer */\r\n    public readonly renderer: Renderer;\r\n\r\n    /** The tile animation frame */\r\n    public tileAnim = [0, 0];\r\n\r\n    private ibLen = 0;// index buffer length\r\n\r\n    /** The index buffer for the tilemaps to share. */\r\n    private indexBuffer: Buffer = null;\r\n\r\n    /** The shader used to render tilemaps. */\r\n    private shader: TilemapShader;\r\n\r\n    /**\r\n\t * {@link TextileResource} instances used to upload textures batched in tiled groups. This is\r\n\t * used only if {@link settings.TEXTURES_PER_TILEMAP} is greater than 1.\r\n\t */\r\n    private textiles: Array<TextileResource> = [];\r\n\r\n    /** @param renderer - The managing renderer */\r\n    constructor(renderer: Renderer)\r\n    {\r\n\t    super(renderer);\r\n\r\n\t    this.shader = new TilemapShader(settings.TEXTURES_PER_TILEMAP);\r\n\t    this.indexBuffer = new Buffer(undefined, true, true);\r\n\t    this.checkIndexBuffer(2000);\r\n\t    this.makeTextiles();\r\n    }\r\n\r\n    /**\r\n\t * Binds the tile textures to the renderer, and updates the tilemap shader's `uSamplerSize` uniform.\r\n\t *\r\n\t * If {@link settings.TEXTILE_UNITS}\r\n\t *\r\n\t * @param renderer - The renderer to which the textures are to be bound.\r\n\t * @param textures - The tile textures being bound.\r\n\t */\r\n    bindTileTextures(renderer: Renderer, textures: Array<BaseTexture>): void\r\n    {\r\n\t    const len = textures.length;\r\n        const shader = this.shader;\r\n\t    const maxTextures = settings.TEXTURES_PER_TILEMAP;\r\n        const samplerSize: Array<number> = shader.uniforms.uSamplerSize;\r\n\r\n\t    if (len > settings.TEXTILE_UNITS * maxTextures)\r\n\t    {\r\n            // TODO: Show error message instead of silently failing!\r\n\t        return;\r\n\t    }\r\n\r\n        if (settings.TEXTILE_UNITS <= 1)\r\n\t    {\r\n            // Bind each texture directly & update samplerSize.\r\n            for (let i = 0; i < textures.length; i++)\r\n            {\r\n                const texture = textures[i];\r\n\r\n                if (!texture || !texture.valid)\r\n                {\r\n                    return;\r\n                }\r\n\r\n                renderer.texture.bind(textures[i], i);\r\n\r\n                samplerSize[i * 2] = 1.0 / textures[i].realWidth;\r\n                samplerSize[(i * 2) + 1] = 1.0 / textures[i].realHeight;\r\n            }\r\n\t    }\r\n        else\r\n        {\r\n            // Ensure we have enough textiles, in case settings.TEXTILE_UNITS was modified.\r\n            this.makeTextiles();\r\n\r\n            const usedTextiles = Math.ceil(len / settings.TEXTILE_UNITS);\r\n\r\n            // First ensure each textile has all tiles point to the right textures.\r\n            for (let i = 0; i < len; i++)\r\n            {\r\n                const texture = textures[i];\r\n\r\n                if (texture && texture.valid)\r\n                {\r\n                    const resourceIndex = Math.floor(i / settings.TEXTILE_UNITS);\r\n                    const tileIndex = i % settings.TEXTILE_UNITS;\r\n\r\n                    this.textiles[resourceIndex].tile(tileIndex, texture);\r\n                }\r\n            }\r\n\r\n            // Then bind the textiles + update samplerSize.\r\n            for (let i = 0; i < usedTextiles; i++)\r\n            {\r\n                renderer.texture.bind(this.textiles[i].baseTexture, i);\r\n\r\n                samplerSize[i * 2] = 1.0 / this.textiles[i].width;\r\n                samplerSize[(i * 2) + 1] = 1.0 / this.textiles[i].baseTexture.height;\r\n            }\r\n        }\r\n\r\n        shader.uniforms.uSamplerSize = samplerSize;\r\n    }\r\n\r\n    start(): void\r\n    {\r\n\t    // sorry, nothing\r\n    }\r\n\r\n    /**\r\n\t * @internal\r\n\t * @ignore\r\n\t */\r\n    createVb(): TilemapGeometry\r\n    {\r\n\t    const geom = new TilemapGeometry();\r\n\r\n\t    geom.addIndex(this.indexBuffer);\r\n\t    geom.lastTimeAccess = Date.now();\r\n\r\n\t    return geom;\r\n    }\r\n\r\n    /** @return The {@link TilemapShader} shader that this rendering pipeline is using. */\r\n    getShader(): TilemapShader { return this.shader; }\r\n\r\n    destroy(): void\r\n    {\r\n\t    super.destroy();\r\n\t    // this.rectShader.destroy();\r\n\t    this.shader = null;\r\n    }\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    public checkIndexBuffer(size: number, _vb: TilemapGeometry = null): void\r\n    {\r\n\t    const totalIndices = size * 6;\r\n\r\n\t    if (totalIndices <= this.ibLen)\r\n\t    {\r\n\t        return;\r\n\t    }\r\n\r\n\t    let len = totalIndices;\r\n\r\n\t    while (len < totalIndices)\r\n\t    {\r\n\t        len <<= 1;\r\n\t    }\r\n\r\n\t    this.ibLen = totalIndices;\r\n\t    this.indexBuffer.update(utils.createIndicesForQuads(size,\r\n\t        settings.use32bitIndex ? new Uint32Array(size * 6) : undefined));\r\n\r\n\t    // \tTODO: create new index buffer instead?\r\n\t    // if (vb) {\r\n\t    // \tconst curIndex = vb.getIndex();\r\n\t    // \tif (curIndex !== this.indexBuffer && (curIndex.data as any).length < totalIndices) {\r\n\t    // \t\tthis.swapIndex(vb, this.indexBuffer);\r\n\t    // \t}\r\n\t    // }\r\n    }\r\n\r\n    /** Makes textile resources and initializes {@link TileRenderer.textiles}. */\r\n    private makeTextiles(): void\r\n    {\r\n\t    if (settings.TEXTILE_UNITS <= 1)\r\n\t    {\r\n\t        return;\r\n\t    }\r\n\r\n\t    for (let i = 0; i < settings.TEXTILE_UNITS; i++)\r\n\t    {\r\n            if (this.textiles[i]) continue;\r\n\r\n            const resource = new TextileResource();\r\n\t        const baseTex = new BaseTexture(resource);\r\n\r\n\t        baseTex.scaleMode = settings.TEXTILE_SCALE_MODE;\r\n\t        baseTex.wrapMode = WRAP_MODES.CLAMP;\r\n\r\n            this.textiles[i] = resource;\r\n\t    }\r\n    }\r\n}\r\n","import { CanvasTileRenderer } from './CanvasTileRenderer';\r\nimport { CompositeTilemap } from './CompositeTilemap';\r\nimport { Constant } from './settings';\r\nimport { TextileResource } from './TextileResource';\r\nimport { Tilemap } from './Tilemap';\r\nimport { TilemapShader, TilemapGeometry } from './TilemapShader';\r\nimport { TileRenderer } from './TileRenderer';\r\n\r\n// Prevent SCALE_MODES from becoming lazy import in Constant.ts - which causes a import() in the declaration file,\r\n// which causes API extractor to fail https://github.com/microsoft/rushstack/issues/2140\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\r\nimport { extensions, ExtensionType, SCALE_MODES } from '@pixi/core';\r\n\r\n// eslint-disable-next-line camelcase\r\nexport const pixi_tilemap = {\r\n    CanvasTileRenderer,\r\n    CompositeRectTileLayer: CompositeTilemap,\r\n    CompositeTilemap,\r\n    Constant,\r\n    TextileResource,\r\n    MultiTextureResource: TextileResource,\r\n    RectTileLayer: Tilemap,\r\n    Tilemap,\r\n    TilemapShader,\r\n    TilemapGeometry,\r\n    RectTileShader: TilemapShader,\r\n    RectTileGeom: TilemapGeometry,\r\n    TileRenderer,\r\n};\r\n\r\nexport * from './CanvasTileRenderer';\r\nexport * from './CompositeTilemap';\r\nexport * from './settings';\r\nexport * from './TextileResource';\r\nexport * from './Tilemap';\r\nexport * from './TilemapShader';\r\nexport * from './shaderGenerator';\r\nexport * from './TileRenderer';\r\n\r\nexport { CompositeTilemap as CompositeRectTileLayer } from './CompositeTilemap';\r\nexport { Tilemap as RectTileLayer } from './Tilemap';\r\n\r\nextensions.add({\r\n    name: 'tilemap',\r\n    type: ExtensionType.RendererPlugin,\r\n    ref: TileRenderer as any\r\n});\r\n"],"names":["CanvasTileRenderer","renderer","extensions","ExtensionType","settings","SCALE_MODES","value","Constant","POINT_STRUCT","POINT_STRUCT2","POINT_STRUCT_SIZE","Tilemap","Container","tileset","Bounds","plugin","wt","i","tileTexture","x","y","options","baseTexture","textureIndex","texture","Texture","textureList","u","v","tileWidth","tileHeight","animX","animY","rotate","animCountX","animCountY","animDivisor","alpha","pb","offset","count","divisor","points","tileAnim","n","x1","y1","x2","y2","w","h","shader","rectsCount","textures","vb","boundCountPerBuffer","vertexBuf","vertices","vs","bk","arr","sz","textureId","shiftU","shiftV","animWidth","animHeight","animXEncoded","animYEncoded","u0","v0","u1","v1","u2","v2","u3","v3","w2","h2","cX","cY","groupD8","DRAW_MODES","anim","minX","minY","maxX","maxY","rect","CompositeTilemap","tileTextures","texPerChild","len1","len2","tilemap","children","childIndex","tileIndex","child","tex","j","tilemapPlugin","layers","layer","TextileResource","Resource","tiles","index","tile","glTexture","gl","width","height","ALPHA_MODES","doClear","spr","res","generateSampleSrc","maxTextures","src","fillSamplers","sampleValues","samplerSize","generateFragmentSrc","fragmentSrc","tilemapVertexTemplateSrc","tilemapFragmentTemplateSrc","TilemapShader","Shader","Program","shaderGenerator.generateFragmentSrc","Matrix","shaderGenerator.fillSamplers","TilemapGeometry","Geometry","buf","Buffer","TileRenderer","ObjectRenderer","len","usedTextiles","resourceIndex","geom","size","_vb","totalIndices","utils","resource","baseTex","BaseTexture","WRAP_MODES","pixi_tilemap","core"],"mappings":"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"}