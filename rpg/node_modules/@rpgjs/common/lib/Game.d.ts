import { EventEmitter } from './EventEmitter';
import { RpgCommonPlayer } from './Player';
import { constructor, Controls } from '@rpgjs/types';
import { GameWorker } from './Worker';
import { HitObject } from './Hit';
import { RpgShape } from './Shape';
export declare enum GameSide {
    Server = "server",
    Client = "client",
    Worker = "worker"
}
export declare class RpgCommonGame extends EventEmitter {
    events: any;
    world: any;
    side: GameSide;
    initialize(side: GameSide): void;
    get isWorker(): boolean;
    start(world: any): void;
    createWorkers(options: any): GameWorker;
    addObject(_class: any, playerId?: string): any;
    addPlayer(playerClass: any, playerId?: string): any;
    addEvent<T>(eventClass: constructor<T>, eventId?: string): T;
    addShape(obj: HitObject): RpgShape;
    processInput<RpgPlayer extends RpgCommonPlayer>(playerId: string, controls?: Controls): Promise<{
        player: RpgPlayer;
        inputs: string[];
    }>;
}
