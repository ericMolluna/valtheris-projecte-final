import { EventEmitter } from './EventEmitter.js';
import { isArray } from './Utils.js';
export var HookServer;
(function (HookServer) {
    HookServer["Start"] = "Server.Start";
    HookServer["Step"] = "Server.Step";
    HookServer["Auth"] = "Server.Auth";
    HookServer["PlayerConnected"] = "Server.onConnected";
    HookServer["PlayerDisconnected"] = "Server.onDisconnected";
    HookServer["AddMap"] = "Server.AddMap";
    HookServer["AddEvent"] = "Server.AddEvent";
    HookServer["AddWorldMaps"] = "Server.AddWorldMaps";
    HookServer["AddDatabase"] = "Server.AddDatabase";
    HookServer["PlayerInput"] = "Server.onInput";
    HookServer["PlayerJoinMap"] = "Server.onJoinMap";
    HookServer["PlayerLeaveMap"] = "Server.onLeaveMap";
    HookServer["PlayerLevelUp"] = "Server.onLevelUp";
    HookServer["PlayerDead"] = "Server.onDead";
    HookServer["PlayerInShape"] = "Server.onInShape";
    HookServer["PlayerOutShape"] = "Server.onOutShape";
    HookServer["PlayerMove"] = "Server.PlayerMove";
    HookServer["PlayerCanChangeMap"] = "Server.PlayerCanChangeMap";
    HookServer["ScalabilityPlayerConnected"] = "Server.ScalabilityPlayerConnected";
    HookServer["ScalabilityChangeServer"] = "Server.ScalabilityChangeServer";
})(HookServer || (HookServer = {}));
export var HookClient;
(function (HookClient) {
    HookClient["Start"] = "Client.Start";
    HookClient["Step"] = "Client.Step";
    HookClient["Connected"] = "Client.Connected";
    HookClient["Disconnect"] = "Client.Disconnect";
    HookClient["ConnectedError"] = "Client.ConnectedError";
    HookClient["AddSpriteSheet"] = "Client.AddSpriteSheet";
    HookClient["AddGui"] = "Client.AddGui";
    HookClient["AddSound"] = "Client.AddSound";
    HookClient["SendInput"] = "Client.SendInput";
    HookClient["BeforeSceneLoading"] = "Client.BeforeSceneLoading";
    HookClient["AfterSceneLoading"] = "Client.AfterSceneLoading";
    HookClient["SceneMapLoading"] = "Client.SceneMapLoading";
    HookClient["SceneAddSprite"] = "Client.SceneAddSprite";
    HookClient["SceneOnChanges"] = "Client.SceneOnChanges";
    HookClient["SceneDraw"] = "Client.SceneDraw";
    HookClient["SceneRemoveSprite"] = "Client.SceneRemoveSprite";
    HookClient["AddSprite"] = "Client.AddSprite";
    HookClient["RemoveSprite"] = "Client.RemoveSprite";
    HookClient["UpdateSprite"] = "Client.UpdateSprite";
    HookClient["ChangesSprite"] = "Client.ChangesSprite";
    HookClient["WindowResize"] = "Client.WindowResize";
    HookClient["SpriteMove"] = "Client.SpriteMove";
})(HookClient || (HookClient = {}));
/**
 * @deprecated
 */
export class PluginSystem extends EventEmitter {
    constructor() {
        super(...arguments);
        this.customHooks = {};
    }
    customHookExists(name) {
        return this.customHooks[name];
    }
    loadPlugins(plugins, shared, type) {
        if (!plugins)
            return;
        for (let plugin of plugins) {
            if (!plugin)
                continue;
            let plug = [];
            if (!isArray(plugin)) {
                plug = [plugin];
            }
            else {
                plug = plugin;
            }
            const [side, options] = plug;
            if (!side[type])
                continue;
            side[type]({
                RpgPlugin,
                ...shared
            }, options);
        }
    }
    loadServerPlugins(plugins, shared) {
        this.loadPlugins(plugins, shared, 'server');
    }
    loadClientPlugins(plugins, shared) {
        this.loadPlugins(plugins, shared, 'client');
    }
}
export const RpgPlugin = new PluginSystem();
//# sourceMappingURL=Plugin.js.map