import { BehaviorSubject } from 'rxjs';
import { EventEmitter } from './EventEmitter.js';
import Utils from './Utils.js';
export class Scheduler extends EventEmitter {
    constructor() {
        super(...arguments);
        this.fps = 60;
        this.deltaTime = 0;
        this.frame = 0;
        this.timestamp = 0;
        this.requestedDelay = 0;
        this.lastTimestamp = 0;
        this._tick = new BehaviorSubject({
            timestamp: 0,
            deltaTime: 0,
            frame: 0,
            deltaRatio: 0
        });
        this._stop = false;
    }
    get tick() {
        return this._tick.asObservable();
    }
    nextTick(timestamp) {
        this.lastTimestamp = this.lastTimestamp || this.timestamp; // first
        this.deltaTime = Utils.preciseNow() - this.timestamp;
        this.timestamp = timestamp;
        this._tick.next({
            timestamp: this.timestamp,
            deltaTime: this.deltaTime,
            frame: this.frame,
            deltaRatio: ~~this.deltaTime / ~~Utils.fps2ms(this.fps)
        });
        this.lastTimestamp = this.timestamp;
        this.frame++;
    }
    /**
     * start the schedule
     * @return {Scheduler} returns this scheduler instance
     */
    start(options) {
        if (options.maxFps)
            this.maxFps = options.maxFps;
        if (options.fps)
            this.fps = options.fps;
        if (options.delay)
            this.requestedDelay = options.delay;
        const requestAnimationFrame = (fn) => {
            if (Utils.isBrowser()) {
                window.requestAnimationFrame(fn.bind(this));
            }
            else {
                setTimeout(() => {
                    this.requestedDelay = 0;
                    fn(Utils.preciseNow());
                }, Utils.fps2ms(this.fps) + this.requestedDelay);
            }
        };
        if (!this.maxFps) {
            const loop = (timestamp) => {
                requestAnimationFrame(loop);
                this.nextTick(timestamp);
            };
            requestAnimationFrame(loop);
        }
        else {
            const msInterval = Utils.fps2ms(this.maxFps);
            let now = Utils.preciseNow();
            let then = Utils.preciseNow();
            const loop = (timestamp) => {
                if (this._stop)
                    return;
                requestAnimationFrame(loop);
                now = Utils.preciseNow();
                const elapsed = now - then;
                if (elapsed > msInterval) {
                    then = now - (elapsed % msInterval);
                    this.nextTick(timestamp);
                }
            };
            requestAnimationFrame(loop);
        }
        return this;
    }
    stop() {
        this._stop = true;
        this._tick.complete();
    }
}
//# sourceMappingURL=Scheduler.js.map