import { RpgCommonPlayer } from './Player';
import { TiledObjectClass } from '@rpgjs/tiled';
import { Vector2d } from './Vector2d';
import { AbstractObject } from './AbstractObject';
export declare enum ShapePositioning {
    Default = "default",
    Center = "center"
}
type ShapeObject = TiledObjectClass & {
    onIn?(player: RpgCommonPlayer): any;
    onOut?(player: RpgCommonPlayer): any;
    fixEvent?: RpgCommonPlayer;
    positioning?: ShapePositioning;
};
export declare class RpgShape extends TiledObjectClass {
    _hitbox: any;
    type: string;
    class: string;
    /**
    * Get/Set name
    * @title name
    * @prop { string } name
    * @memberof Shape
    */
    name: string;
    fixEvent?: RpgCommonPlayer;
    private playersIn;
    private onIn;
    private onOut;
    clientContainer: any;
    /**
    * Get/Set positioning
    * @title positioning
    * @prop { ShapePositioning } positioning
    * @default default
    * @memberof Shape
    */
    positioning?: ShapePositioning;
    components: any[];
    constructor(obj: ShapeObject);
    private setPos;
    get hasCollision(): boolean;
    get id(): any;
    get hitbox(): any;
    set hitbox(val: any);
    /**
    * Get/Set width
    * @title width
    * @prop { number } width
    * @since 3.0.0-beta.5
    * @memberof Shape
    */
    get width(): number;
    set width(val: number);
    /**
    * Get/Set height
    * @title height
    * @prop { number } height
    * @since 3.0.0-beta.5
    * @memberof Shape
    */
    get height(): number;
    set height(val: number);
    /**
    * Get/Set x
    * @title x
    * @prop { number } x
    * @memberof Shape
    */
    get x(): number;
    set x(val: number);
    get z(): number | undefined;
    /**
    * Get/Set y
    * @title y
    * @prop { number } y
    * @memberof Shape
    */
    get y(): number;
    set y(val: number);
    get position(): Vector2d;
    /**
    * Get/Set properties

    * @title Properties
    * @prop { object } Properties
    * @memberof Shape
    */
    isEvent(): boolean;
    set(obj: ShapeObject): void;
    setComponent(): void;
    getType(): string;
    in(player: AbstractObject): Promise<boolean>;
    out(player: AbstractObject): Promise<boolean>;
    /**
     * Whether the player is in this shape
     *
     * @title Player is in this shape ?
     * @method shape.playerIsIn(player)
     * @returns {boolean}
     * @memberof Shape
     */
    playerIsIn(player: AbstractObject): boolean;
    isShapePosition(): boolean;
    /**
      * Recover the player with the shape. You must have used the `attachShape()` method on the player
      *
      * @title Get Player Owner
      * @method shape.getPlayerOwner()
      * @returns {RpgPlayer | undefined}
      * @memberof Shape
      */
    getPlayerOwner(): RpgCommonPlayer | undefined;
    /**
     * We get the rectangle of a shape (box, circle and polygon). We use in the grid system to recover a shape.
     * Generally we add a margin (size of a tile) to detect if the player enters or leaves a shape
     * @param margin
     * @returns { minX: number, minY: number, maxX: number, maxY: number }
     */
    getSizeBox(margin?: number): {
        minX: number;
        minY: number;
        maxX: number;
        maxY: number;
    };
}
export {};
