export class Vector2d {
    constructor(x, y, z = 0) {
        this.x = x;
        this.y = y;
        this.z = z;
    }
    set(vector) {
        this.x = vector.x;
        this.y = vector.y;
        this.z = vector.z;
        return this;
    }
    add(vector) {
        this.x += vector.x;
        this.y += vector.y;
        return this;
    }
    subtract(vector) {
        this.x -= vector.x;
        this.y -= vector.y;
        return this;
    }
    multiply(scalar) {
        this.x *= scalar;
        this.y *= scalar;
        return this;
    }
    divide(scalar) {
        this.x /= scalar;
        this.y /= scalar;
        return this;
    }
    distanceWith(vector) {
        const dx = this.x - vector.x;
        const dy = this.y - vector.y;
        return Math.sqrt(dx ** 2 + dy ** 2);
    }
    magnitude() {
        return Math.sqrt(this.x * this.x + this.y * this.y);
    }
    copy() {
        return new Vector2d(this.x, this.y, this.z);
    }
    normalize() {
        return this.divide(this.magnitude());
    }
    isEqual(vector) {
        return this.x === vector.x &&
            this.y === vector.y &&
            this.z === vector.z;
    }
    hasDifferentValues(vector) {
        return this.x !== vector.x ||
            this.y !== vector.y ||
            this.z !== vector.z;
    }
}
export class Vector2dZero extends Vector2d {
    constructor() {
        super(0, 0);
    }
}
//# sourceMappingURL=Vector2d.js.map