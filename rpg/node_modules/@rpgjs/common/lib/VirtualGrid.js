export class VirtualGrid {
    constructor(nbCellWidth, cellWidth, cellHeight) {
        this.nbCellWidth = nbCellWidth;
        this.cellWidth = cellWidth;
        this.cellHeight = cellHeight;
        this.cells = new Map();
        this.inverseCells = new Map();
    }
    zoom(nbCell) {
        this.nbCellWidth = Math.ceil(this.nbCellWidth / nbCell);
        this.cellWidth *= nbCell;
        this.cellHeight *= nbCell;
        return this;
    }
    getCellIndex(x, y) {
        return this.nbCellWidth * Math.floor(y / this.cellHeight) + Math.floor(x / this.cellWidth);
    }
    getCells(box, cb) {
        const { minX, minY, maxX, maxY } = box;
        const topLeft = this.getCellIndex(minX, minY);
        const topRight = this.getCellIndex(maxX, minY);
        const bottomLeft = this.getCellIndex(minX, maxY);
        const nbLines = (bottomLeft - topLeft) / this.nbCellWidth + 1;
        for (let j = 0; j < nbLines; j++) {
            for (let i = topLeft; i <= topRight; i++) {
                const index = i + (j * this.nbCellWidth);
                cb(index);
            }
        }
    }
    getObjectsByBox(box) {
        let objects = [];
        this.getCells(box, (index) => {
            objects = [...objects, ...this.cells.get(index) || []];
        });
        return new Set(objects);
    }
    getObjectsById(id) {
        let objects = [];
        const cells = this.inverseCells.get(id);
        cells?.forEach((index) => {
            objects = [...objects, ...this.cells.get(index) || []];
        });
        return new Set(objects);
    }
    clearObjectInCells(id) {
        if (this.inverseCells.has(id)) {
            this.inverseCells.get(id)?.forEach((cellIndex) => {
                this.cells.get(cellIndex)?.delete(id);
            });
            this.inverseCells.delete(id);
        }
    }
    insertInCells(id, box) {
        this.clearObjectInCells(id);
        const cells = new Set();
        this.getCells(box, (index) => {
            cells.add(index);
            const memoryCells = this.cells.get(index);
            if (!memoryCells) {
                this.cells.set(index, new Set());
            }
            this.cells.get(index)?.add(id);
        });
        this.inverseCells.set(id, cells);
    }
}
//# sourceMappingURL=VirtualGrid.js.map