import { TiledWorldMap } from '@rpgjs/tiled';
import { RpgCommonMap } from './Map';
import { Direction } from '@rpgjs/types';
export interface RpgClassMap<T> {
    id?: string;
    new (server: any): T;
}
export interface RpgTiledWorldMap extends TiledWorldMap {
    properties?: {
        [key: string]: any;
    };
}
type PositionBox = {
    minX: number;
    minY: number;
    maxX: number;
    maxY: number;
};
export declare class RpgCommonWorldMaps {
    id: string;
    private mapsTree;
    private maps;
    constructor(id: string);
    /**
     * Adding information from the map to the world
     *
     * > Maximum maps in world: 500
     *
     * @title Add Map in world
     * @method world.addMap(wordMapInfo,map)
     * @param {object} wordMapInfo
     * Object file:
     * ```ts
     * {
     *  fileName: string;
        height: number;
        width: number;
        x: number;
        y: number;
     * }
        ```
        `fileName` represents a file to the JSON file (TMX transformed) or directly the Tiled Map Editor object
     *
     * @param {class of RpgMap} map
     * @since 3.0.0-beta.8
     * @memberof RpgWorldMaps
     */
    addMap(wordMapInfo: RpgTiledWorldMap, map: RpgClassMap<RpgCommonMap>): void;
    updateMap(mapId: string, wordMapInfo: RpgTiledWorldMap): boolean;
    /**
     * Remove map of the world
     * @title Remove map of the world
     * @method world.removeMap(mapId)
     * @param {string} mapId
     * @returns {boolean}
     * @since 3.0.0-beta.8
     * @memberof RpgWorldMaps
     */
    removeMap(mapId: string): boolean;
    removeAllMaps(): void;
    /**
     * Retrieve information from the world
     *
     * @title Retrieve information from the world
     * @method world.getMapInfo(id)
     * @param {string} id map id
     * @return {RpgTiledWorldMap | undefined}
     * {
     *  id?: string
     *  properties?: object
     *  fileName: string;
        height: number;
        width: number;
        x: number;
        y: number;
     * }
     * @since 3.0.0-beta.8
     * @memberof RpgWorldMaps
     */
    getMapInfo(id: string): RpgTiledWorldMap | undefined;
    /**
     * Retrieves neighboring maps according to positions or direction
     *
     * @title Retrieves neighboring maps
     * @method world.getAdjacentMaps(map,search)
     * @param {RpgMap} map The source map. We want to find the neighboring maps of the source map
     * @param { PositionBox | Direction | { x: number, y: number } } search Research method
     *  * PositionBox. An object of the following form:
     *  `{ minX: number, minY: number, maxX: number, maxY: number }`
     *  * Direction. Collect all the maps in the given direction (e.g. the maps at the top)
     *  * Point: { x: number, y: number }
     * @return { {class of RpgMap}[] }
     * @since 3.0.0-beta.8
     * @example
     * ```ts
     * world.getAdjacentMaps(mymap, Direction.Up) // returns [class of RpgMap]
     * ```
     * @memberof RpgWorldMaps
     */
    getAdjacentMaps(map: RpgCommonMap, search: PositionBox | Direction | {
        x: number;
        y: number;
    }): RpgClassMap<RpgCommonMap>[];
}
export {};
