(function(global, factory) {
  typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global = typeof globalThis !== "undefined" ? globalThis : global || self, factory(global.RpgDatabase = {}));
})(this, function(exports2) {
  "use strict";
  function merge(options, type, _static = {}) {
    const transformToRate = (optionName, propName) => {
      if (options[optionName]) {
        options[optionName] = options[optionName].map((element) => {
          if (!element.rate) {
            return {
              rate: 1,
              [propName]: element
            };
          }
          return element;
        });
      }
    };
    transformToRate("elements", "element");
    transformToRate("elementsDefense", "element");
    transformToRate("elementsEfficiency", "element");
    transformToRate("addStates", "state");
    transformToRate("removeStates", "state");
    transformToRate("statesDefense", "state");
    transformToRate("statesEfficiency", "state");
    return (target) => {
      const id = options.id || target.name.toLowerCase();
      target.id = id;
      target.prototype.id = id;
      target._type = type;
      for (let key in _static) {
        target[key] = options[key];
      }
      for (let key in options) {
        target.prototype[key] = options[key];
      }
      target.prototype.toJSON = function() {
        return this.id;
      };
    };
  }
  function Item(options) {
    return merge(options, "item", {
      price: options.price
    });
  }
  function Actor(options) {
    return merge(options, "actor");
  }
  var ClassHooks = /* @__PURE__ */ ((ClassHooks2) => {
    ClassHooks2["onSet"] = "onSet";
    ClassHooks2["canEquip"] = "canEquip";
    return ClassHooks2;
  })(ClassHooks || {});
  function Class(options) {
    return merge(options, "class");
  }
  function Skill(options) {
    if (!options.coefficient)
      options.coefficient = {
        "int": 1
      };
    return merge(options, "skill");
  }
  function State(options) {
    return merge(options, "state");
  }
  function Weapon(options) {
    return merge(options, "weapon", {
      price: options.price
    });
  }
  function Armor(options) {
    return merge(options, "armor", {
      price: options.price
    });
  }
  function Enemy(options) {
    return merge({
      options
    }, "enemy");
  }
  var Effect = /* @__PURE__ */ ((Effect2) => {
    Effect2["NONE"] = "NONE";
    Effect2["CAN_NOT_SKILL"] = "CAN_NOT_SKILL";
    Effect2["CAN_NOT_ITEM"] = "CAN_NOT_ITEM";
    Effect2["ALWAYS_ATTACK_ENEMIES"] = "ALWAYS_ATTACK_ENEMIES";
    Effect2["CAN_NOT_EVADE"] = "CAN_NOT_EVADE";
    Effect2["CAN_NOT_GET_EXP"] = "CAN_NOT_GET_EXP";
    Effect2["CAN_NOT_GET_GOLD"] = "CAN_NOT_GET_GOLD";
    Effect2["PHARMACOLOGY"] = "PHARMACOLOGY";
    Effect2["CRITICAL_BONUS"] = "CRITICAL_BONUS";
    Effect2["SUPER_GUARD"] = "SUPER_GUARD";
    Effect2["GUARD"] = "GUARD";
    Effect2["PREVENT_CRITICAL"] = "PREVENT_CRITICAL";
    Effect2["HALF_SP_COST"] = "HALF_SP_COST";
    Effect2["DOUBLE_EXP_GAIN"] = "DOUBLE_EXP_GAIN";
    Effect2["AUTO_HP_RECOVER"] = "AUTO_HP_RECOVER";
    Effect2["FAST_ATTACK"] = "FAST_ATTACK";
    Effect2["DUAL_ATTACK"] = "DUAL_ATTACK";
    Effect2["SLIP_DAMAGE"] = "SLIP_DAMAGE";
    return Effect2;
  })(Effect || {});
  var Efficiency = /* @__PURE__ */ ((Efficiency2) => {
    Efficiency2[Efficiency2["VERY_VULNERABLE"] = 2] = "VERY_VULNERABLE";
    Efficiency2[Efficiency2["VULNERABLE"] = 1.5] = "VULNERABLE";
    Efficiency2[Efficiency2["NORMAL"] = 1] = "NORMAL";
    Efficiency2[Efficiency2["INVULNERABLE"] = 0.5] = "INVULNERABLE";
    Efficiency2[Efficiency2["PERFECT_INVULNERABLE"] = 0] = "PERFECT_INVULNERABLE";
    Efficiency2[Efficiency2["GAIN_HP"] = -0.5] = "GAIN_HP";
    return Efficiency2;
  })(Efficiency || {});
  exports2.Actor = Actor;
  exports2.Armor = Armor;
  exports2.Class = Class;
  exports2.ClassHooks = ClassHooks;
  exports2.Effect = Effect;
  exports2.Efficiency = Efficiency;
  exports2.Enemy = Enemy;
  exports2.Item = Item;
  exports2.Skill = Skill;
  exports2.State = State;
  exports2.Weapon = Weapon;
  Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
});
