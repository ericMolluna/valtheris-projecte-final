import { RpgEvent } from "../Player/Player";
import { RpgMap } from "./Map";
export type EventsList = {
    [playerId: string]: RpgEvent;
};
export declare enum EventMode {
    Shared = "shared",
    Scenario = "scenario"
}
/**
 *  ⚠️ Please note that the event system can be on the player or on the card.
 * On player, it's Scenario mode
 * On-map: Shared mode
 * So this here is either RpgMap or RpgPlayer
 * You can check the mode with the mode cleanup on the retrieved event
 */
export declare class EventManager {
    /**
   * @title event list
   * @prop { { [eventId: string]: RpgEvent } } [events]
   * @memberof Map
   * */
    events: EventsList;
    /**
    * Get Event in current map
    * @title Get Event
    * @since 3.0.0-beta.7
    * @method map.getEvent(eventId)
    * @param {string} eventId Event Id
    * @returns {RpgEvent | undefined}
    * @memberof Map
    */
    getEvent<T extends RpgEvent>(eventId: string): T | undefined;
    getEventByName<T extends RpgEvent>(eventName: string): T | undefined;
    /**
    * Removes an event from the map. Returns false if the event is not found
    *
    * Deletion of an event forced to be performed at the end of several aynschronous notions
    *
    * @title Remove Event
    * @since 3.0.0-beta.4
    * @method map.removeEvent(eventId)
    * @param {string} eventId Event Name
    * @returns {boolean}
    * @memberof Map
    */
    removeEvent(eventId: string): boolean;
}
export interface EventManager {
    getCurrentMap(): RpgMap | null;
    id: string;
    $setCurrentState: (path: string, value: any) => void;
    $currentState(): any;
}
