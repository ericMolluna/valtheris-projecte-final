import { PrebuiltGui } from '@rpgjs/common';
import { Gui } from './Gui.js';
import { Move } from '../Player/MoveManager.js';
export var DialogPosition;
(function (DialogPosition) {
    DialogPosition["Top"] = "top";
    DialogPosition["Bottom"] = "bottom";
    DialogPosition["Middle"] = "middle";
})(DialogPosition || (DialogPosition = {}));
export class DialogGui extends Gui {
    constructor(player) {
        super(PrebuiltGui.Dialog, player);
    }
    openDialog(message, options) {
        if (!options.choices)
            options.choices = [];
        if (options.autoClose == undefined)
            options.autoClose = false;
        if (!options.position)
            options.position = DialogPosition.Bottom;
        if (options.fullWidth == undefined)
            options.fullWidth = true;
        if (options.typewriterEffect == undefined)
            options.typewriterEffect = true;
        const event = options.talkWith;
        let memoryDir;
        if (event) {
            memoryDir = event.direction;
            event.breakRoutes(true);
            event.moveRoutes([Move.turnTowardPlayer(this.player)]);
        }
        const data = {
            autoClose: options.autoClose,
            position: options.position,
            fullWidth: options.fullWidth,
            typewriterEffect: options.typewriterEffect,
            // remove value property. It is not useful to know this on the client side.
            choices: options.choices.map(choice => ({
                text: choice.text
            }))
        };
        return super.open({
            message,
            ...data
        }, {
            waitingAction: true,
            blockPlayerInput: true
        }).then((val) => {
            if (event) {
                event.replayRoutes();
                event.direction = memoryDir;
            }
            return val;
        });
    }
}
//# sourceMappingURL=DialogGui.js.map