import { ItemClass, ItemInstance, WeaponClass, ArmorClass } from '@rpgjs/database';
import { EffectManager } from './EffectManager';
import { GoldManager } from './GoldManager';
import { StateManager } from './StateManager';
type Inventory = {
    nb: number;
    item: ItemInstance;
};
export declare class ItemManager {
    items: Inventory[];
    equipments: ItemInstance[];
    /**
    * Retrieves the information of an object: the number and the instance
    * @title Get Item
    * @method player.getItem(itemClass)
    * @param {ItemClass | string} itemClass Identifier of the object if the parameter is a string
    * @returns {{ nb: number, item: instance of ItemClass }}
    * @memberof ItemManager
    * @example
    *
    * ```ts
    * import Potion from 'your-database/potion'
    *
    * player.addItem(Potion, 5)
    * const inventory = player.getItem(Potion)
    * console.log(inventory) // { nb: 5, item: <instance of Potion> }
    *  ```
    */
    getItem(itemClass: ItemClass | string): Inventory;
    /**
     * Check if the player has the item in his inventory.
     * @title Has Item
     * @method player.hasItem(itemClass)
     * @param {ItemClass | string} itemClass Identifier of the object if the parameter is a string
     * @returns {boolean}
     * @memberof ItemManager
     * @example
     *
     * ```ts
     * import Potion from 'your-database/potion'
     *
     * player.hasItem(Potion) // false
     *  ```
     */
    hasItem(itemClass: ItemClass | string): boolean;
    _getItemIndex(itemClass: ItemClass | string): number;
    /**
     * Add an item in the player's inventory. You can give more than one by specifying `nb`
     *
     * `onAdd()` method is called on the ItemClass
     *
     * @title Add Item
     * @method player.addItem(item,nb=1)
     * @param {ItemClass} itemClass
     * @param {number} [nb] Default 1
     * @returns {{ nb: number, item: instance of ItemClass }}
     * @memberof ItemManager
     * @example
     *
     * ```ts
     * import Potion from 'your-database/potion'
     * player.addItem(Potion, 5)
     *  ```
     */
    addItem(itemClass: ItemClass | string, nb?: number): Inventory;
    /**
     * Deletes an item. Decreases the value `nb`. If the number falls to 0, then the item is removed from the inventory. The method then returns `undefined`
     *
     * `onRemove()` method is called on the ItemClass
     *
     * @title Remove Item
     * @method player.removeItem(item,nb=1)
     * @param {ItemClass | string} itemClass string is item id
     * @param {number} [nb] Default 1
     * @returns {{ nb: number, item: instance of ItemClass } | undefined}
     * @throws {ItemLog} notInInventory
     * If the object is not in the inventory, an exception is raised
     *  ```
     * {
     *      id: ITEM_NOT_INVENTORY,
     *      msg: '...'
     * }
     * ```
     * @memberof ItemManager
     * @example
     *
     * ```ts
     * import Potion from 'your-database/potion'
     *
     * try {
     *    player.removeItem(Potion, 5)
     * }
     * catch (err) {
     *    console.log(err)
     * }
     * ```
     */
    removeItem(itemClass: ItemClass | string, nb?: number): Inventory | undefined;
    /**
     * Purchases an item and reduces the amount of gold
     *
     * `onAdd()` method is called on the ItemClass
     *
     * @title Buy Item
     * @method player.buyItem(item,nb=1)
     * @param {ItemClass | string} itemClass string is item id
     * @param {number} [nb] Default 1
     * @returns {{ nb: number, item: instance of ItemClass }}
     * @throws {ItemLog} haveNotPrice
     * If you have not set a price on the item
     *  ```
     * {
     *      id: NOT_PRICE,
     *      msg: '...'
     * }
     * ```
     * @throws {ItemLog} notEnoughGold
     * If the player does not have enough money
     *  ```
     * {
     *      id: NOT_ENOUGH_GOLD,
     *      msg: '...'
     * }
     * ```
     * @memberof ItemManager
     * @example
     *
     * ```ts
     * import Potion from 'your-database/potion'
     *
     * try {
     *    player.buyItem(Potion)
     * }
     * catch (err) {
     *    console.log(err)
     * }
     * ```
     */
    buyItem(itemClass: ItemClass | string, nb?: number): Inventory;
    /**
     * Sell an item and the player wins the amount of the item divided by 2
     *
     * `onRemove()` method is called on the ItemClass
     *
     * @title Sell Item
     * @method player.sellItem(item,nb=1)
     * @param {ItemClass | string} itemClass string is item id
     * @param {number} [nbToSell] Default 1
     * @returns {{ nb: number, item: instance of ItemClass }}
     * @throws {ItemLog} haveNotPrice
     * If you have not set a price on the item
     *   ```
     * {
     *      id: NOT_PRICE,
     *      msg: '...'
     * }
     * ```
     * @throws {ItemLog} notInInventory
     * If the object is not in the inventory, an exception is raised
     *  ```
     * {
     *      id: ITEM_NOT_INVENTORY,
     *      msg: '...'
     * }
     * ```
     * @throws {ItemLog} tooManyToSell
     * If the number of items for sale exceeds the number of actual items in the inventory
     *  ```
     * {
     *      id: TOO_MANY_ITEM_TO_SELL,
     *      msg: '...'
     * }
     * ```
     * @memberof ItemManager
     * @example
     *
     * ```ts
     * import Potion from 'your-database/potion'
     *
     * try {
     *     player.addItem(Potion)
     *     player.sellItem(Potion)
     * }
     * catch (err) {
     *    console.log(err)
     * }
     * ```
     */
    sellItem(itemClass: ItemClass | string, nbToSell?: number): Inventory;
    private getParamItem;
    /**
     * recover the attack sum of items equipped on the player.
     *
     * @title Get the player's attack
     * @prop {number} player.atk
     * @memberof ItemManager
     */
    get atk(): number;
    /**
    * recover the physic defense sum of items equipped on the player.
    *
    * @title Get the player's pdef
    * @prop {number} player.pdef
    * @memberof ItemManager
    */
    get pdef(): number;
    /**
    * recover the skill defense sum of items equipped on the player.
    *
    * @title Get the player's sdef
    * @prop {number} player.sdef
    * @memberof ItemManager
    */
    get sdef(): number;
    /**
     *  Use an object. Applies effects and states. Removes the object from the inventory then
     *
     * `onUse()` method is called on the ItemClass (If the use has worked)
     * `onRemove()` method is called on the ItemClass
     *
     * @title Use an Item
     * @method player.useItem(item,nb=1)
     * @param {ItemClass | string} itemClass string is item id
     * @returns {{ nb: number, item: instance of ItemClass }}
     * @throws {ItemLog} restriction
     * If the player has the `Effect.CAN_NOT_ITEM` effect
     *   ```
     * {
     *      id: RESTRICTION_ITEM,
     *      msg: '...'
     * }
     * ```
     * @throws {ItemLog} notInInventory
     * If the object is not in the inventory, an exception is raised
     *  ```
     * {
     *      id: ITEM_NOT_INVENTORY,
     *      msg: '...'
     * }
     * ```
     * @throws {ItemLog} notUseItem
     * If the `consumable` property is on false
     *  ```
     * {
     *      id: NOT_USE_ITEM,
     *      msg: '...'
     * }
     * ```
     * @throws {ItemLog} chanceToUseFailed
     * Chance to use the item has failed. Chances of use is defined with `ItemClass.hitRate`
     *  ```
     * {
     *      id: USE_CHANCE_ITEM_FAILED,
     *      msg: '...'
     * }
     * ```
     * > the item is still deleted from the inventory
     *
     * `onUseFailed()` method is called on the ItemClass
     *
     * @memberof ItemManager
     * @example
     *
     * ```ts
     * import Potion from 'your-database/potion'
     *
     * try {
     *     player.addItem(Potion)
     *     player.useItem(Potion)
     * }
     * catch (err) {
     *    console.log(err)
     * }
     * ```
     */
    useItem(itemClass: ItemClass | string): Inventory;
    /**
     * Equips a weapon or armor on a player. Think first to add the item in the inventory with the `addItem()` method before equipping the item.
     *
     * `onEquip()` method is called on the ItemClass
     *
     * @title Equip Weapon or Armor
     * @method player.equip(itemClass,equip=true)
     * @param {ItemClass | string} itemClass string is item id
     * @param {number} [equip] Equip the object if true or un-equipped if false
     * @returns {void}
     * @throws {ItemLog} notInInventory
     * If the item is not in the inventory
     *  ```
        {
            id: ITEM_NOT_INVENTORY,
            msg: '...'
        }
        ```
     * @throws {ItemLog} invalidToEquiped
        If the item is not by a weapon or armor
        ```
        {
            id: INVALID_ITEM_TO_EQUIP,
            msg: '...'
        }
        ```
    * @throws {ItemLog} isAlreadyEquiped
        If the item Is already equipped
        ```
        {
            id: ITEM_ALREADY_EQUIPED,
            msg: '...'
        }
        ```
     * @memberof ItemManager
     * @example
     *
     * ```ts
     * import Sword from 'your-database/sword'
     *
     * try {
     *      player.addItem(Sword)
     *      player.equip(Sword)
     * }
     * catch (err) {
     *    console.log(err)
     * }
     * ```
     */
    equip(itemClass: WeaponClass | ArmorClass | string, equip?: boolean): void;
}
export interface ItemManager extends GoldManager, StateManager, EffectManager {
    databaseById(itemClass: any): any;
}
export {};
