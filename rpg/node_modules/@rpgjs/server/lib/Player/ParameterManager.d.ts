export declare class ParameterManager {
    private _paramsModifier;
    private _parameters;
    private _hp;
    private _sp;
    private _exp;
    private _level;
    /**
    * ```ts
    * player.initialLevel = 5
    * ```
    *
    * @title Set initial level
    * @prop {number} player.initialLevel
    * @default 1
    * @memberof ParameterManager
    * */
    initialLevel: number;
    /**
     * ```ts
     * player.finalLevel = 50
     * ```
     *
     * @title Set final level
     * @prop {number} player.finalLevel
     * @default 99
     * @memberof ParameterManager
     * */
    finalLevel: number;
    /**
     * With Object-based syntax, you can use following options:
     * - `basis: number`
     * - `extra: number`
     * - `accelerationA: number`
     * - `accelerationB: number`
     * @title Change Experience Curve
     * @prop {object} player.expCurve
     * @default
     *  ```ts
     * {
     *      basis: 30,
     *      extra: 20,
     *      accelerationA: 30,
     *      accelerationB: 30
     * }
     * ```
     * @memberof ParameterManager
     * */
    expCurve: {
        basis: number;
        extra: number;
        accelerationA: number;
        accelerationB: number;
    };
    /**
     * Changes the health points
     * - Cannot exceed the MaxHP parameter
     * - Cannot have a negative value
     * - If the value is 0, a hook named `onDead()` is called in the RpgPlayer class.
     *
     * ```ts
     * player.hp = 100
     * ```
     * @title Change HP
     * @prop {number} player.hp
     * @default MaxHPValue
     * @memberof ParameterManager
     * */
    set hp(val: number);
    get hp(): number;
    /**
     * Changes the skill points
     * - Cannot exceed the MaxSP parameter
     * - Cannot have a negative value
     *
     * ```ts
     * player.sp = 200
     * ```
     * @title Change SP
     * @prop {number} player.sp
     * @default MaxSPValue
     * @memberof ParameterManager
     * */
    set sp(val: number);
    get sp(): number;
    /**
     * Changing the player's experience.
     * ```ts
     * player.exp += 100
     * ```
     *
     * Levels are based on the experience curve.
     *
     * ```ts
     * console.log(player.level) // 1
     * console.log(player.expForNextlevel) // 150
     * player.exp += 160
     * console.log(player.level) // 2
     * ```
     *
     * @title Change Experience
     * @prop {number} player.exp
     * @default 0
     * @memberof ParameterManager
     * */
    set exp(val: number);
    get exp(): number;
    /**
     * Changing the player's level.
     *
     * ```ts
     * player.level += 1
     * ```
     *
     * The level will be between the initial level given by the `initialLevel` and final level given by `finalLevel`
     *
     * ```ts
     * player.finalLevel = 50
     * player.level = 60
     * console.log(player.level) // 50
     * ```
     *
     * @title Change Level
     * @prop {number} player.level
     * @default 1
     * @memberof ParameterManager
     * */
    set level(val: number);
    get level(): number;
    /**
    * ```ts
    * console.log(player.expForNextlevel) // 150
    * ```
    * @title Experience for next level ?
    * @prop {number} player.expForNextlevel
    * @readonly
    * @memberof ParameterManager
    * */
    get expForNextlevel(): number;
    /**
     * Read the value of a parameter. Put the name of the parameter.
     *
     * ```ts
     * import { Presets } from '@rpgjs/server'
     *
     * const { MAXHP } = Presets
     *
     * console.log(player.param[MAXHP])
     * ```
     *
     * > Possible to use the `player.getParamValue(name)` method instead
     * @title Get Param Value
     * @prop {object} player.param
     * @readonly
     * @memberof ParameterManager
     * */
    get param(): {};
    get paramsModifier(): {
        [key: string]: {
            value?: number;
            rate?: number;
        };
    };
    /**
     * Changes the values of some parameters
     *
     * > It is important that these parameters have been created beforehand with the `addParameter()` method.
     * > By default, the following settings have been created:
     * - maxhp
     * - maxsp
     * - str
     * - int
     * - dex
     * - agi
     *
     * **Object Key**
     *
     * The key of the object is the name of the parameter
     *
     * > The good practice is to retrieve the name coming from a constant
     *
     * **Object Value**
     *
     * The value of the key is an object containing:
     * ```
     * {
     *   value: number,
     *   rate: number
     * }
     * ```
     *
     * - value: Adds a number to the parameter
     * - rate: Adds a rate to the parameter
     *
     * > Note that you can put both (value and rate)
     *
     * In the case of a state or the equipment of a weapon or armor, the parameters will be changed but if the state disappears or the armor/weapon is de-equipped, then the parameters will return to the initial state.
     *
     * @prop {Object} [paramsModifier]
     * @example
     *
     * ```ts
     * import { Presets } from '@rpgjs/server'
     *
     * const { MAXHP } = Presets
     *
     * player.paramsModifier = {
     *      [MAXHP]: {
     *          value: 100
     *      }
     * }
     * ```
     *
     * 1. Player has 741 MaxHp
     * 2. After changing the parameter, he will have 841 MaxHp
     *
     * @title Set Parameters Modifier
     * @prop {number} paramsModifier
     * @memberof ParameterManager
     * */
    set paramsModifier(val: {
        [key: string]: {
            value?: number;
            rate?: number;
        };
    });
    get parameters(): Map<string, {
        start: number;
        end: number;
    }>;
    set parameters(val: Map<string, {
        start: number;
        end: number;
    }>);
    private _expForLevel;
    private getParam;
    getParamValue(name: string): number | never;
    /**
     * Give a new parameter. Give a start value and an end value.
     * The start value will be set to the level set at `player.initialLevel` and the end value will be linked to the level set at `player.finalLevel`.
     *
     * ```ts
     * const SPEED = 'speed'
     *
     * player.addParameter(SPEED, {
     *     start: 10,
     *     end: 100
     * })
     *
     * player.param[SPEED] // 10
     * player.level += 5
     * player.param[SPEED] // 14
     * ```
     *
     * @title Add custom parameters
     * @method player.addParameter(name,curve)
     * @param {name} name
     * @param {object} curve Scheme of the object: { start: number, end: number }
     * @returns {void}
     * @memberof ParameterManager
     * */
    addParameter(name: string, { start, end }: {
        start: number;
        end: number;
    }): void;
    /**
     * Gives back in percentage of health points to skill points
     *
     * ```ts
     * import { Presets } from '@rpgjs/server'
     *
     * const { MAXHP } = Presets
     *
     * console.log(player.param[MAXHP]) // 800
     * player.hp = 100
     * player.recovery({ hp: 0.5 }) // = 800 * 0.5
     * console.log(player.hp) // 400
     * ```
     *
     * @title Recovery HP and/or SP
     * @method player.recovery(params)
     * @param {object} params Scheme of the object: { hp: number, sp: number }. The values of the numbers must be in 0 and 1
     * @returns {void}
     * @memberof ParameterManager
     * */
    recovery({ hp, sp }: {
        hp?: number;
        sp?: number;
    }): void;
    /**
     * restores all HP and SP
     *
     * ```ts
     * import { Presets } from '@rpgjs/server'
     *
     * const { MAXHP, MAXSP } = Presets
     *
     * console.log(player.param[MAXHP], player.param[MAXSP]) // 800, 230
     * player.hp = 100
     * player.sp = 0
     * player.allRecovery()
     * console.log(player.hp, player.sp) // 800, 230
     * ```
     *
     * @title All Recovery
     * @method player.allRecovery()
     * @returns {void}
     * @memberof ParameterManager
     * */
    allRecovery(): void;
}
export interface ParameterManager {
    _class: any;
    $schema: any;
    changeRoomState(key: string): void;
}
