import { World } from 'simple-room';
import { Utils } from '@rpgjs/common';
const { isString } = Utils;
class QueryClass {
    /**
     * Listen to the changes on all the rooms
     *
     * ```ts
     * import { RpgWorld } from '@rpgjs/server'
     * import { map } from 'rxjs/operators' // install rxjs
     *
     * RpgWorld.changes
     *  .pipe(
     *      map(rooms => rooms['mymap'])
     *  )
     *  .subscribe((room) => {
     *      const users: any = Object.values(room.users)
     *      console.log(users)
     *  })
     * ```
     *
     * @title Subscribe to the world
     * @prop {Observable} RpgWorld.changes
     * @memberof RpgWorld
     * */
    get changes() {
        return World.changes.asObservable();
    }
    /**
     * Retrieve a player according to his ID
     *
     * ```ts
     * import { RpgWorld } from '@rpgjs/server'
     *
     * const player = RpgWorld.getPlayer(player) // player is RpgPlayer (player.id) or string (id)
     * ```
     *
     * @title Get Player
     * @method RpgWorld.getPlayer(player)
     * @param {RpgPlayer | string} player identifier
     * @returns {RpgPlayer}
     * @memberof RpgWorld
     */
    getPlayer(player) {
        const id = isString(player) ? player : '' + player.id;
        const _player = World.getUser(id);
        return _player;
    }
    /**
     * Recover all the players of the game
     *
     * ```ts
     * import { RpgWorld } from '@rpgjs/server'
     *
     * const players = RpgWorld.getPlayers()
     * ```
     *
     * @title Get all Players
     * @method RpgWorld.getPlayers()
     * @returns {Array<RpgPlayer>}
     * @memberof RpgWorld
     */
    getPlayers() {
        const users = World.getUsers();
        const array = Object.values(users);
        return array.map((user) => this.getPlayer(user));
    }
    /**
     * Recover all map objects: players and events. If you specify the `player` parameter, it also retrieves the events in scenario mode of the player in question
     *
     * ```ts
     * import { RpgWorld } from '@rpgjs/server'
     *
     * const objects = RpgWorld.getObjectsOfMap('mapname')
     * console.log(objects)
     * ```
     *
     * Also retrieve events in Scenario mode:
     *
     * ```ts
     * import { RpgWorld } from '@rpgjs/server'
     *
     * const objects = RpgWorld.getObjectsOfMap('mapname', 'playerid')
     * ```
     *
     * @title Get all objects of map
     * @method RpgWorld.getObjectsOfMap(map,playerId?)
     * @param {string} map Map Name
     * @param {RpgPlayer | string} playerId player identifier
     * @returns {Array<RpgPlayer>}
     * @memberof RpgWorld
     */
    getObjectsOfMap(map, playerId) {
        return Object.values(this._getObjectsOfMap(map, playerId));
    }
    _getObjectsOfMap(map, playerId) {
        const room = World.getRoom(map);
        let player = null;
        if (playerId) {
            player = this.getPlayer(playerId);
        }
        return {
            ...room.users,
            ...room.events,
            ...(player ? player.events : {})
        };
    }
    /**
     * Find all the shapes of the map
     *
     * ```ts
     * import { RpgWorld } from '@rpgjs/server'
     *
     * const shapes = RpgWorld.getShapesOfMap('mapname')
     * console.log(shapes)
     * ```
     *
     * @title Get all shapes of map
     * @method RpgWorld.getShapesOfMap(map)
     * @param {string} map Map Name
     * @returns {Array<RpgShape>}
     * @memberof RpgWorld
     */
    getShapesOfMap(map) {
        return Object.values(this._getShapesOfMap(map));
    }
    _getShapesOfMap(map) {
        const room = World.getRoom(map);
        return room.shapes;
    }
    // TODO
    getRooms() {
        return World.getRooms();
    }
    getRoom(name) {
        return World.getRoom(name);
    }
    /**
     * Recover all the players of a map
     *
     * ```ts
     * import { RpgWorld } from '@rpgjs/server'
     *
     * const players = RpgWorld.getPlayersOfMap('mapname')
     * ```
     *
     * @title Get all Players a map
     * @method RpgWorld.getPlayersOfMap(map)
     * @param {string} map Map Name
     * @returns {Array<RpgPlayer>}
     * @memberof RpgWorld
     */
    getPlayersOfMap(map) {
        const room = World.getRoom(map);
        return Object.values(room.users);
    }
}
export const Query = new QueryClass();
//# sourceMappingURL=Query.js.map