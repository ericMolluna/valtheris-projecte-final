import { SceneMap } from './Scenes/Map';
import { WorldClass } from 'simple-room';
import { RpgCommonGame } from '@rpgjs/common';
import { Observable } from 'rxjs';
import { Tick } from '@rpgjs/types';
import { DatabaseTypes } from '@rpgjs/database';
export declare class RpgServerEngine {
    /**
    * Express App Instance. If you have assigned this variable before starting the game, you can get the instance of Express
    *
    * @prop {Express App} [app]
    * @memberof RpgServerEngine
    */
    app: any;
    /**
     * List of the data
     *
     * @prop {object} [database]
     * @memberof RpgServerEngine
     */
    database: any;
    /**
     * retrieve the global configurations assigned at the entry point
     *
     * @prop {object} [globalConfig]
     * @readonly
     * @memberof RpgServerEngine
     * */
    globalConfig: any;
    /**
     * Combat formulas
     *
     * @prop {object} [damageFormulas]
     * @memberof RpgServerEngine
     */
    damageFormulas: any;
    serverId: string;
    private scenes;
    protected totalConnected: number;
    private scheduler;
    private playerProps;
    gameEngine: RpgCommonGame;
    world: WorldClass;
    workers: any;
    envs: any;
    io: any;
    inputOptions: any;
    /**
     * Combat formulas
     *
     * @prop {Socket Io Server} [io]
     * @memberof RpgServerEngine
     */
    initialize(io: any, inputOptions: any): void;
    private _init;
    /**
     * Adds data to the server's database (in RAM) for later use
     *
     *
     * @method server.addInDatabase(id,data)
     * @title Add in database
     * @param {number} id resource id
     * @param {class | object} dataClass A class representing the data. You can just add a object if you specify the type
     * @enum {string} [type] The type of data
     *
     * item
     * weapon
     * armor
     * skill
     * class
     * state
     * actor
     * @since 3.0.0-beta.4
     * @example
     * ```ts
     * @Item({
     *      name: 'Potion',
     *      description: 'Gives 100 HP',
     * })
     * class MyItem() {}
     *
     * server.addInDatabase('dynamic_item', MyItem)
     * ```
     *
     * or with an object
     *
     * ```ts
     * server.addInDatabase('dynamic_item', {
     *      name: 'Potion',
     *      description: 'Gives 100 HP',
     * }, 'item')
     * ```
     *
     * @returns {void}
     * @memberof RpgServerEngine
     */
    addInDatabase(id: string, dataClass: any, type?: DatabaseTypes): void;
    /**
    * Start the RPG server
    *
    * @method server.start()
    * @title Start Server
    * @returns {void}
    * @memberof RpgServerEngine
    */
    start(inputOptions?: any, scheduler?: boolean): Promise<void>;
    private transport;
    get tick(): Observable<Tick>;
    /**
     * Sends all packages to clients. The sending is done automatically but you can decide to send yourself by calling this method (for example, for unit tests)
     *
     * @method server.send()
     * @title Send All Packets
     * @returns {void}
     * @memberof RpgServerEngine
     */
    send(): Promise<void>;
    private updatePlayersMove;
    nextTick(timestamp: number): void;
    step(t: number, dt: number): void;
    private loadScenes;
    getScene<T>(name: string): T;
    /**
     * Return the scene that manages the maps of the game
     * @prop {SceneMap} [sceneMap]
     * @since 3.0.0-beta.4
     * @memberof RpgServerEngine
     */
    get sceneMap(): SceneMap;
    get module(): import("@rpgjs/common/lib/Plugin").PluginSystem;
    get assetsPath(): string;
    sendToPlayer(currentPlayer: any, eventName: any, data: any): void;
    private getPlayerBySession;
    private onPlayerConnected;
    private onPlayerDisconnected;
    stop(): void;
}
