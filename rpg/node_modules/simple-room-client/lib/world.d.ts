type ListenOptions = {
    encoded?: boolean;
};
export declare class WorldClass {
    socket: any;
    static userId: string | null;
    private obs$;
    private users;
    get value(): import("rxjs").Observable<any>;
    /**
     * Join an existing room
     *
     * @param {string} roomId
     */
    join(roomId: string): void;
    /**
     * Change the value of a property
     *
     * @param {string} prop
     * @param {any} value
     */
    input(prop: any, value: any): {
        catchError: (cb: any) => any;
    };
    /**
    * Do an action
    *
    * @param {string} name
    * @param {any} value
    */
    action(name: string, value: any): {
        catchError: (cb: any) => any;
    };
    /**
     * Listen to the changes on a socket
     *
     * @param {string} socket
     * @return {World}
     */
    listen(socket: any, options?: ListenOptions): this;
    reset(): void;
}
export declare const World: WorldClass;
export {};
