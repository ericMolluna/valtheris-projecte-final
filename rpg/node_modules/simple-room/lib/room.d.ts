import { RoomClass } from './interfaces/room.interface';
export interface RoomOptions {
    /**
     * If true, the old room will be propagated to the new room when the user changes rooms
     * @default true
     * @type {boolean}
     * @memberof RoomOptions
     * @since 3.1.0
     */
    propagateOldRoom?: boolean;
}
export declare class Room {
    private options;
    private proxyRoom;
    private memoryTotalObject;
    private memoryObject;
    private permanentObject;
    private propagateOldRoom;
    static readonly propNameUsers: string;
    static hasExtraProp(obj: any): boolean;
    static compileSchema(schema: any, room?: any): {
        masks: object;
        dict: object;
        permanentObject: string[];
    };
    constructor(options: RoomOptions);
    private join;
    private leave;
    private getUsersLength;
    addInputs(room: RoomClass, obj: Object): void;
    snapshotUser(room: RoomClass, userId: string): any;
    snapshot(room: RoomClass): any;
    setProxy(room: RoomClass): any;
    add(id: string, room: RoomClass): RoomClass;
    static extractObjectOfRoom(room: Object, schema: any): any;
    detectChanges(room: RoomClass, obj: Object | null, path: string): void;
    editMemoryObject(path: string, roomOrValue: any): void;
}
