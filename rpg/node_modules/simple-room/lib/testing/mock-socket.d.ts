declare class MiddlewareHandler {
    middlewares: any[];
    use(middleware: any): void;
    run(socket: any, finalCallback?: (err?: any) => void): void;
    clear(): void;
}
declare class MockIo {
    events: Map<string, any[]>;
    eventsOnce: Map<string, any>;
    on(name: string, value: any): void;
    off(name: string): void;
    once(name: string, value: any): void;
    _trigger(name: string, data: any, client?: any): void;
}
declare class MockSocket extends MockIo {
    handshake: any;
    private client;
    id: string;
    middlewares: MiddlewareHandler;
    constructor(handshake: any, client: any);
    emit(name: string, data: any): void;
    removeAllListeners(name: string): void;
    use(cb: (packet: any, next: any) => void): void;
    disconnect(): void;
}
declare class MockClientIo extends MockIo {
    fakeId?: string | undefined;
    id: string;
    _socket: any;
    constructor(fakeId?: string | undefined);
    connection(handshake?: any): Promise<this>;
    emit(name: string, data: any): this;
    disconnect(): void;
}
declare class MockServerIo extends MockIo {
    private clients;
    private middlewares;
    connection(client: any, handshake: any): Promise<MockSocket>;
    emit(name: string, data: any, id: any): void;
    use(cb: (socket: any, next: any) => void): void;
    clear(): void;
}
declare const _default: {
    serverIo: MockServerIo;
    ClientIo: typeof MockClientIo;
};
export default _default;
