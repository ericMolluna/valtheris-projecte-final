import { TransportCommon } from './common';
import { BehaviorSubject } from 'rxjs';
export type BandwidthSocket = {
    incoming: {
        size: number;
        timestamp: number;
    }[];
    outgoing: {
        size: number;
        timestamp: number;
    }[];
};
export type BandwidthData = Record<string, BehaviorSubject<BandwidthSocket>>;
export type TransportOptions = {
    maxKbpsIncoming?: number;
    maxKbpsOutgoing?: number;
    clientCanJoinRoom?: boolean;
    timeoutDisconnect?: number;
    auth?: (socket: any) => Promise<string | never> | string | never;
};
export declare class Transport extends TransportCommon {
    io: any;
    private options;
    private bandwidthData;
    private readonly WINDOW_SECONDS;
    constructor(io: any, options?: TransportOptions);
    private handleConnection;
    private use;
    private updateBandwidthData;
    private cleanOldData;
    private calculateKbps;
    getTelemetry(): {
        sockets: Record<string, {
            incomingKbps: number;
            outgoingKbps: number;
        }>;
        totalKbps: number;
    };
}
