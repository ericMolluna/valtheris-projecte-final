import { RoomOptions } from './room';
import { Transport, TransportOptions } from './transports/socket';
import { User } from './rooms/default';
import { RoomClass } from './interfaces/room.interface';
import { BehaviorSubject } from 'rxjs';
import type { IAgonesOptions, IAgones } from './interfaces/agones.interface';
export declare class WorldClass {
    private rooms;
    users: {
        [key: string]: User;
    };
    private userClass;
    timeoutDisconnect: number;
    changes: BehaviorSubject<any>;
    private _transport;
    agonesSDK: IAgones | null;
    agonesOptions: IAgonesOptions;
    /**
     * Define user class
     *
     * @method setUserClass()
     * @returns {void}
     */
    setUserClass(userClass: any): void;
    setAgones(agones: IAgones, options?: IAgonesOptions): void;
    /**
     * Define transportation. You can set socket.io as default
     *
     * @method transport()
     * @param {object} io
     * @returns {Transport}
     */
    transport(io: any, options?: TransportOptions): Transport;
    /**
     * Loop over all rooms of a user
     *
     * Example
     *
     * ```js
     * World.forEachUserRooms('userid', (room, user) => {
     *      console.log(room.id)
     * })
     * ```
     *
     * @method forEachUserRooms()
     * @param {string} userId
     * @param {(room: RoomClass, user: User)} cb
     * @returns {void}
     */
    forEachUserRooms<T = User>(userId: string, cb: (room: RoomClass, user: T) => void): void;
    /**
    * Retrieves all users in the world
    *
    * @method getUsers()
    * @returns { {[id: string]: User} }
    */
    getUsers<T = User>(): {
        [id: string]: T;
    };
    /**
     * Get a user in the world
     *
     * @param {string} id User Id
     * @param {boolean} [getProxy] Retrieves the proxied user. (true by default)
     * @returns {User | null}
     */
    getUser<T = User>(id: string, getProxy?: boolean): T | null;
    setUser(user: any, socket?: any): User;
    get nbUsers(): number;
    /**
     * Send the packages to the rooms.
     *
     * @method send()
     */
    send(): Promise<void>;
    /**
     * Connect a user
     *
     * @method connectUser()
     * @param {object} socket
     * @param {id} userId
     * @param {object} options
     *  - getUserInstance: function that returns a new instance of the user
     * @returns {User}
     */
    connectUser<T = User>(socket: any, id: string, options?: {
        getUserInstance?: any;
    }): T;
    /**
     * Removes the user from all rooms and removes him from the world
     *
     * @method disconnectUser()
     * @param {string} userId
     * @returns {void}
     */
    disconnectUser(userId: string): Promise<void>;
    httpUpgrade(httpServer: any, io: any): void;
    private joinOrLeaveRoom;
    /**
     * Leave an existing room
     *
     * @param {string} roomId
     * @param {string} userId
     * @returns {RoomClass | undefined}
     */
    leaveRoom(roomId: string, userId: string): Promise<RoomClass | undefined>;
    /**
     * Join an existing room
     *
     * @param {string} roomId
     * @param {string} userId
     * @returns {RoomClass | undefined}
     */
    joinRoom(roomId: string, userId: string): Promise<RoomClass | undefined>;
    /**
     * Add Room
     *
     * Example 1:
     *
     * ```js
     * class ChessRoom {
     *
     * }
     *
     * World.addRoom('myroom', ChessRoom)
     * ```
     *
     * Example 2:
     *
     * ```js
     * class ChessRoom {
     *  constructor(name) { }
     * }
     *
     * World.addRoom('myroom', new ChessRoom('test'))
     * ```
     *
     * @param {string} id room id
     * @param {Class or instance of Class} roomClass
     * @returns instance of Class
     */
    addRoom<T = any>(id: string, roomClass: any, options?: RoomOptions): T;
    /**
     * Get an existing room
     *
     * @param {string} roomId
     * @returns {RoomClass}
     */
    getRoom(id: string): RoomClass | undefined;
    /**
     * Recover the rooms of the world
     *
     * @param {string} roomId
     * @returns {Map<string, RoomClass>}
     */
    getRooms(): Map<string, RoomClass>;
    /**
     * Delete the room
     *
     * @param {string} roomId
     * @returns {void}
     */
    removeRoom(id: string): void;
    /**
     * Remove all rooms and users
     */
    clear(): void;
}
export declare const World: WorldClass;
